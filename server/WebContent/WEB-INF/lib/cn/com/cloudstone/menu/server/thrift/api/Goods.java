/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package cn.com.cloudstone.menu.server.thrift.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 商品，菜品
 */
public class Goods implements org.apache.thrift.TBase<Goods, Goods._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Goods");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SHORT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("shortName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField INTRODUCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("introduction", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MATERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("material", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField CONDIMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("condiments", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField IMGS_FIELD_DESC = new org.apache.thrift.protocol.TField("imgs", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ON_SALES_FIELD_DESC = new org.apache.thrift.protocol.TField("onSales", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField SPICY_FIELD_DESC = new org.apache.thrift.protocol.TField("spicy", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField SOLDOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("soldout", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField NUMBER_DECIMAL_PERMITED_FIELD_DESC = new org.apache.thrift.protocol.TField("numberDecimalPermited", org.apache.thrift.protocol.TType.BOOL, (short)13);

  public int id; // required
  public String name; // required
  public String shortName; // required
  public double price; // required
  public String introduction; // required
  public List<String> material; // required
  public List<String> condiments; // required
  public List<Img> imgs; // required
  public String category; // required
  public boolean onSales; // required
  public int spicy; // required
  public boolean soldout; // required
  public boolean numberDecimalPermited; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    SHORT_NAME((short)3, "shortName"),
    PRICE((short)4, "price"),
    INTRODUCTION((short)5, "introduction"),
    MATERIAL((short)6, "material"),
    CONDIMENTS((short)7, "condiments"),
    IMGS((short)8, "imgs"),
    CATEGORY((short)9, "category"),
    ON_SALES((short)10, "onSales"),
    SPICY((short)11, "spicy"),
    SOLDOUT((short)12, "soldout"),
    NUMBER_DECIMAL_PERMITED((short)13, "numberDecimalPermited");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // SHORT_NAME
          return SHORT_NAME;
        case 4: // PRICE
          return PRICE;
        case 5: // INTRODUCTION
          return INTRODUCTION;
        case 6: // MATERIAL
          return MATERIAL;
        case 7: // CONDIMENTS
          return CONDIMENTS;
        case 8: // IMGS
          return IMGS;
        case 9: // CATEGORY
          return CATEGORY;
        case 10: // ON_SALES
          return ON_SALES;
        case 11: // SPICY
          return SPICY;
        case 12: // SOLDOUT
          return SOLDOUT;
        case 13: // NUMBER_DECIMAL_PERMITED
          return NUMBER_DECIMAL_PERMITED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PRICE_ISSET_ID = 1;
  private static final int __ONSALES_ISSET_ID = 2;
  private static final int __SPICY_ISSET_ID = 3;
  private static final int __SOLDOUT_ISSET_ID = 4;
  private static final int __NUMBERDECIMALPERMITED_ISSET_ID = 5;
  private BitSet __isset_bit_vector = new BitSet(6);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHORT_NAME, new org.apache.thrift.meta_data.FieldMetaData("shortName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INTRODUCTION, new org.apache.thrift.meta_data.FieldMetaData("introduction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATERIAL, new org.apache.thrift.meta_data.FieldMetaData("material", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CONDIMENTS, new org.apache.thrift.meta_data.FieldMetaData("condiments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.IMGS, new org.apache.thrift.meta_data.FieldMetaData("imgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Img.class))));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ON_SALES, new org.apache.thrift.meta_data.FieldMetaData("onSales", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SPICY, new org.apache.thrift.meta_data.FieldMetaData("spicy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOLDOUT, new org.apache.thrift.meta_data.FieldMetaData("soldout", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NUMBER_DECIMAL_PERMITED, new org.apache.thrift.meta_data.FieldMetaData("numberDecimalPermited", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Goods.class, metaDataMap);
  }

  public Goods() {
  }

  public Goods(
    int id,
    String name,
    String shortName,
    double price,
    String introduction,
    List<String> material,
    List<String> condiments,
    List<Img> imgs,
    String category,
    boolean onSales,
    int spicy,
    boolean soldout,
    boolean numberDecimalPermited)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.shortName = shortName;
    this.price = price;
    setPriceIsSet(true);
    this.introduction = introduction;
    this.material = material;
    this.condiments = condiments;
    this.imgs = imgs;
    this.category = category;
    this.onSales = onSales;
    setOnSalesIsSet(true);
    this.spicy = spicy;
    setSpicyIsSet(true);
    this.soldout = soldout;
    setSoldoutIsSet(true);
    this.numberDecimalPermited = numberDecimalPermited;
    setNumberDecimalPermitedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Goods(Goods other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetShortName()) {
      this.shortName = other.shortName;
    }
    this.price = other.price;
    if (other.isSetIntroduction()) {
      this.introduction = other.introduction;
    }
    if (other.isSetMaterial()) {
      List<String> __this__material = new ArrayList<String>();
      for (String other_element : other.material) {
        __this__material.add(other_element);
      }
      this.material = __this__material;
    }
    if (other.isSetCondiments()) {
      List<String> __this__condiments = new ArrayList<String>();
      for (String other_element : other.condiments) {
        __this__condiments.add(other_element);
      }
      this.condiments = __this__condiments;
    }
    if (other.isSetImgs()) {
      List<Img> __this__imgs = new ArrayList<Img>();
      for (Img other_element : other.imgs) {
        __this__imgs.add(new Img(other_element));
      }
      this.imgs = __this__imgs;
    }
    if (other.isSetCategory()) {
      this.category = other.category;
    }
    this.onSales = other.onSales;
    this.spicy = other.spicy;
    this.soldout = other.soldout;
    this.numberDecimalPermited = other.numberDecimalPermited;
  }

  public Goods deepCopy() {
    return new Goods(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.shortName = null;
    setPriceIsSet(false);
    this.price = 0.0;
    this.introduction = null;
    this.material = null;
    this.condiments = null;
    this.imgs = null;
    this.category = null;
    setOnSalesIsSet(false);
    this.onSales = false;
    setSpicyIsSet(false);
    this.spicy = 0;
    setSoldoutIsSet(false);
    this.soldout = false;
    setNumberDecimalPermitedIsSet(false);
    this.numberDecimalPermited = false;
  }

  public int getId() {
    return this.id;
  }

  public Goods setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public Goods setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getShortName() {
    return this.shortName;
  }

  public Goods setShortName(String shortName) {
    this.shortName = shortName;
    return this;
  }

  public void unsetShortName() {
    this.shortName = null;
  }

  /** Returns true if field shortName is set (has been assigned a value) and false otherwise */
  public boolean isSetShortName() {
    return this.shortName != null;
  }

  public void setShortNameIsSet(boolean value) {
    if (!value) {
      this.shortName = null;
    }
  }

  public double getPrice() {
    return this.price;
  }

  public Goods setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bit_vector.clear(__PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return __isset_bit_vector.get(__PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bit_vector.set(__PRICE_ISSET_ID, value);
  }

  public String getIntroduction() {
    return this.introduction;
  }

  public Goods setIntroduction(String introduction) {
    this.introduction = introduction;
    return this;
  }

  public void unsetIntroduction() {
    this.introduction = null;
  }

  /** Returns true if field introduction is set (has been assigned a value) and false otherwise */
  public boolean isSetIntroduction() {
    return this.introduction != null;
  }

  public void setIntroductionIsSet(boolean value) {
    if (!value) {
      this.introduction = null;
    }
  }

  public int getMaterialSize() {
    return (this.material == null) ? 0 : this.material.size();
  }

  public java.util.Iterator<String> getMaterialIterator() {
    return (this.material == null) ? null : this.material.iterator();
  }

  public void addToMaterial(String elem) {
    if (this.material == null) {
      this.material = new ArrayList<String>();
    }
    this.material.add(elem);
  }

  public List<String> getMaterial() {
    return this.material;
  }

  public Goods setMaterial(List<String> material) {
    this.material = material;
    return this;
  }

  public void unsetMaterial() {
    this.material = null;
  }

  /** Returns true if field material is set (has been assigned a value) and false otherwise */
  public boolean isSetMaterial() {
    return this.material != null;
  }

  public void setMaterialIsSet(boolean value) {
    if (!value) {
      this.material = null;
    }
  }

  public int getCondimentsSize() {
    return (this.condiments == null) ? 0 : this.condiments.size();
  }

  public java.util.Iterator<String> getCondimentsIterator() {
    return (this.condiments == null) ? null : this.condiments.iterator();
  }

  public void addToCondiments(String elem) {
    if (this.condiments == null) {
      this.condiments = new ArrayList<String>();
    }
    this.condiments.add(elem);
  }

  public List<String> getCondiments() {
    return this.condiments;
  }

  public Goods setCondiments(List<String> condiments) {
    this.condiments = condiments;
    return this;
  }

  public void unsetCondiments() {
    this.condiments = null;
  }

  /** Returns true if field condiments is set (has been assigned a value) and false otherwise */
  public boolean isSetCondiments() {
    return this.condiments != null;
  }

  public void setCondimentsIsSet(boolean value) {
    if (!value) {
      this.condiments = null;
    }
  }

  public int getImgsSize() {
    return (this.imgs == null) ? 0 : this.imgs.size();
  }

  public java.util.Iterator<Img> getImgsIterator() {
    return (this.imgs == null) ? null : this.imgs.iterator();
  }

  public void addToImgs(Img elem) {
    if (this.imgs == null) {
      this.imgs = new ArrayList<Img>();
    }
    this.imgs.add(elem);
  }

  public List<Img> getImgs() {
    return this.imgs;
  }

  public Goods setImgs(List<Img> imgs) {
    this.imgs = imgs;
    return this;
  }

  public void unsetImgs() {
    this.imgs = null;
  }

  /** Returns true if field imgs is set (has been assigned a value) and false otherwise */
  public boolean isSetImgs() {
    return this.imgs != null;
  }

  public void setImgsIsSet(boolean value) {
    if (!value) {
      this.imgs = null;
    }
  }

  public String getCategory() {
    return this.category;
  }

  public Goods setCategory(String category) {
    this.category = category;
    return this;
  }

  public void unsetCategory() {
    this.category = null;
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.category = null;
    }
  }

  public boolean isOnSales() {
    return this.onSales;
  }

  public Goods setOnSales(boolean onSales) {
    this.onSales = onSales;
    setOnSalesIsSet(true);
    return this;
  }

  public void unsetOnSales() {
    __isset_bit_vector.clear(__ONSALES_ISSET_ID);
  }

  /** Returns true if field onSales is set (has been assigned a value) and false otherwise */
  public boolean isSetOnSales() {
    return __isset_bit_vector.get(__ONSALES_ISSET_ID);
  }

  public void setOnSalesIsSet(boolean value) {
    __isset_bit_vector.set(__ONSALES_ISSET_ID, value);
  }

  public int getSpicy() {
    return this.spicy;
  }

  public Goods setSpicy(int spicy) {
    this.spicy = spicy;
    setSpicyIsSet(true);
    return this;
  }

  public void unsetSpicy() {
    __isset_bit_vector.clear(__SPICY_ISSET_ID);
  }

  /** Returns true if field spicy is set (has been assigned a value) and false otherwise */
  public boolean isSetSpicy() {
    return __isset_bit_vector.get(__SPICY_ISSET_ID);
  }

  public void setSpicyIsSet(boolean value) {
    __isset_bit_vector.set(__SPICY_ISSET_ID, value);
  }

  public boolean isSoldout() {
    return this.soldout;
  }

  public Goods setSoldout(boolean soldout) {
    this.soldout = soldout;
    setSoldoutIsSet(true);
    return this;
  }

  public void unsetSoldout() {
    __isset_bit_vector.clear(__SOLDOUT_ISSET_ID);
  }

  /** Returns true if field soldout is set (has been assigned a value) and false otherwise */
  public boolean isSetSoldout() {
    return __isset_bit_vector.get(__SOLDOUT_ISSET_ID);
  }

  public void setSoldoutIsSet(boolean value) {
    __isset_bit_vector.set(__SOLDOUT_ISSET_ID, value);
  }

  public boolean isNumberDecimalPermited() {
    return this.numberDecimalPermited;
  }

  public Goods setNumberDecimalPermited(boolean numberDecimalPermited) {
    this.numberDecimalPermited = numberDecimalPermited;
    setNumberDecimalPermitedIsSet(true);
    return this;
  }

  public void unsetNumberDecimalPermited() {
    __isset_bit_vector.clear(__NUMBERDECIMALPERMITED_ISSET_ID);
  }

  /** Returns true if field numberDecimalPermited is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberDecimalPermited() {
    return __isset_bit_vector.get(__NUMBERDECIMALPERMITED_ISSET_ID);
  }

  public void setNumberDecimalPermitedIsSet(boolean value) {
    __isset_bit_vector.set(__NUMBERDECIMALPERMITED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SHORT_NAME:
      if (value == null) {
        unsetShortName();
      } else {
        setShortName((String)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case INTRODUCTION:
      if (value == null) {
        unsetIntroduction();
      } else {
        setIntroduction((String)value);
      }
      break;

    case MATERIAL:
      if (value == null) {
        unsetMaterial();
      } else {
        setMaterial((List<String>)value);
      }
      break;

    case CONDIMENTS:
      if (value == null) {
        unsetCondiments();
      } else {
        setCondiments((List<String>)value);
      }
      break;

    case IMGS:
      if (value == null) {
        unsetImgs();
      } else {
        setImgs((List<Img>)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((String)value);
      }
      break;

    case ON_SALES:
      if (value == null) {
        unsetOnSales();
      } else {
        setOnSales((Boolean)value);
      }
      break;

    case SPICY:
      if (value == null) {
        unsetSpicy();
      } else {
        setSpicy((Integer)value);
      }
      break;

    case SOLDOUT:
      if (value == null) {
        unsetSoldout();
      } else {
        setSoldout((Boolean)value);
      }
      break;

    case NUMBER_DECIMAL_PERMITED:
      if (value == null) {
        unsetNumberDecimalPermited();
      } else {
        setNumberDecimalPermited((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NAME:
      return getName();

    case SHORT_NAME:
      return getShortName();

    case PRICE:
      return Double.valueOf(getPrice());

    case INTRODUCTION:
      return getIntroduction();

    case MATERIAL:
      return getMaterial();

    case CONDIMENTS:
      return getCondiments();

    case IMGS:
      return getImgs();

    case CATEGORY:
      return getCategory();

    case ON_SALES:
      return Boolean.valueOf(isOnSales());

    case SPICY:
      return Integer.valueOf(getSpicy());

    case SOLDOUT:
      return Boolean.valueOf(isSoldout());

    case NUMBER_DECIMAL_PERMITED:
      return Boolean.valueOf(isNumberDecimalPermited());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case SHORT_NAME:
      return isSetShortName();
    case PRICE:
      return isSetPrice();
    case INTRODUCTION:
      return isSetIntroduction();
    case MATERIAL:
      return isSetMaterial();
    case CONDIMENTS:
      return isSetCondiments();
    case IMGS:
      return isSetImgs();
    case CATEGORY:
      return isSetCategory();
    case ON_SALES:
      return isSetOnSales();
    case SPICY:
      return isSetSpicy();
    case SOLDOUT:
      return isSetSoldout();
    case NUMBER_DECIMAL_PERMITED:
      return isSetNumberDecimalPermited();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Goods)
      return this.equals((Goods)that);
    return false;
  }

  public boolean equals(Goods that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_shortName = true && this.isSetShortName();
    boolean that_present_shortName = true && that.isSetShortName();
    if (this_present_shortName || that_present_shortName) {
      if (!(this_present_shortName && that_present_shortName))
        return false;
      if (!this.shortName.equals(that.shortName))
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_introduction = true && this.isSetIntroduction();
    boolean that_present_introduction = true && that.isSetIntroduction();
    if (this_present_introduction || that_present_introduction) {
      if (!(this_present_introduction && that_present_introduction))
        return false;
      if (!this.introduction.equals(that.introduction))
        return false;
    }

    boolean this_present_material = true && this.isSetMaterial();
    boolean that_present_material = true && that.isSetMaterial();
    if (this_present_material || that_present_material) {
      if (!(this_present_material && that_present_material))
        return false;
      if (!this.material.equals(that.material))
        return false;
    }

    boolean this_present_condiments = true && this.isSetCondiments();
    boolean that_present_condiments = true && that.isSetCondiments();
    if (this_present_condiments || that_present_condiments) {
      if (!(this_present_condiments && that_present_condiments))
        return false;
      if (!this.condiments.equals(that.condiments))
        return false;
    }

    boolean this_present_imgs = true && this.isSetImgs();
    boolean that_present_imgs = true && that.isSetImgs();
    if (this_present_imgs || that_present_imgs) {
      if (!(this_present_imgs && that_present_imgs))
        return false;
      if (!this.imgs.equals(that.imgs))
        return false;
    }

    boolean this_present_category = true && this.isSetCategory();
    boolean that_present_category = true && that.isSetCategory();
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (!this.category.equals(that.category))
        return false;
    }

    boolean this_present_onSales = true;
    boolean that_present_onSales = true;
    if (this_present_onSales || that_present_onSales) {
      if (!(this_present_onSales && that_present_onSales))
        return false;
      if (this.onSales != that.onSales)
        return false;
    }

    boolean this_present_spicy = true;
    boolean that_present_spicy = true;
    if (this_present_spicy || that_present_spicy) {
      if (!(this_present_spicy && that_present_spicy))
        return false;
      if (this.spicy != that.spicy)
        return false;
    }

    boolean this_present_soldout = true;
    boolean that_present_soldout = true;
    if (this_present_soldout || that_present_soldout) {
      if (!(this_present_soldout && that_present_soldout))
        return false;
      if (this.soldout != that.soldout)
        return false;
    }

    boolean this_present_numberDecimalPermited = true;
    boolean that_present_numberDecimalPermited = true;
    if (this_present_numberDecimalPermited || that_present_numberDecimalPermited) {
      if (!(this_present_numberDecimalPermited && that_present_numberDecimalPermited))
        return false;
      if (this.numberDecimalPermited != that.numberDecimalPermited)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Goods other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Goods typedOther = (Goods)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortName()).compareTo(typedOther.isSetShortName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortName, typedOther.shortName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(typedOther.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, typedOther.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntroduction()).compareTo(typedOther.isSetIntroduction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntroduction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.introduction, typedOther.introduction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaterial()).compareTo(typedOther.isSetMaterial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaterial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.material, typedOther.material);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCondiments()).compareTo(typedOther.isSetCondiments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCondiments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.condiments, typedOther.condiments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImgs()).compareTo(typedOther.isSetImgs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImgs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgs, typedOther.imgs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategory()).compareTo(typedOther.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, typedOther.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnSales()).compareTo(typedOther.isSetOnSales());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnSales()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onSales, typedOther.onSales);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpicy()).compareTo(typedOther.isSetSpicy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpicy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spicy, typedOther.spicy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSoldout()).compareTo(typedOther.isSetSoldout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSoldout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.soldout, typedOther.soldout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumberDecimalPermited()).compareTo(typedOther.isSetNumberDecimalPermited());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberDecimalPermited()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberDecimalPermited, typedOther.numberDecimalPermited);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.id = iprot.readI32();
            setIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SHORT_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.shortName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // PRICE
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.price = iprot.readDouble();
            setPriceIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // INTRODUCTION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.introduction = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // MATERIAL
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
              this.material = new ArrayList<String>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                String _elem2; // required
                _elem2 = iprot.readString();
                this.material.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // CONDIMENTS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
              this.condiments = new ArrayList<String>(_list3.size);
              for (int _i4 = 0; _i4 < _list3.size; ++_i4)
              {
                String _elem5; // required
                _elem5 = iprot.readString();
                this.condiments.add(_elem5);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // IMGS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
              this.imgs = new ArrayList<Img>(_list6.size);
              for (int _i7 = 0; _i7 < _list6.size; ++_i7)
              {
                Img _elem8; // required
                _elem8 = new Img();
                _elem8.read(iprot);
                this.imgs.add(_elem8);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // CATEGORY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.category = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // ON_SALES
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.onSales = iprot.readBool();
            setOnSalesIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // SPICY
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.spicy = iprot.readI32();
            setSpicyIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // SOLDOUT
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.soldout = iprot.readBool();
            setSoldoutIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // NUMBER_DECIMAL_PERMITED
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.numberDecimalPermited = iprot.readBool();
            setNumberDecimalPermitedIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI32(this.id);
    oprot.writeFieldEnd();
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.shortName != null) {
      oprot.writeFieldBegin(SHORT_NAME_FIELD_DESC);
      oprot.writeString(this.shortName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(PRICE_FIELD_DESC);
    oprot.writeDouble(this.price);
    oprot.writeFieldEnd();
    if (this.introduction != null) {
      oprot.writeFieldBegin(INTRODUCTION_FIELD_DESC);
      oprot.writeString(this.introduction);
      oprot.writeFieldEnd();
    }
    if (this.material != null) {
      oprot.writeFieldBegin(MATERIAL_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.material.size()));
        for (String _iter9 : this.material)
        {
          oprot.writeString(_iter9);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.condiments != null) {
      oprot.writeFieldBegin(CONDIMENTS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.condiments.size()));
        for (String _iter10 : this.condiments)
        {
          oprot.writeString(_iter10);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.imgs != null) {
      oprot.writeFieldBegin(IMGS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.imgs.size()));
        for (Img _iter11 : this.imgs)
        {
          _iter11.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.category != null) {
      oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
      oprot.writeString(this.category);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(ON_SALES_FIELD_DESC);
    oprot.writeBool(this.onSales);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SPICY_FIELD_DESC);
    oprot.writeI32(this.spicy);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SOLDOUT_FIELD_DESC);
    oprot.writeBool(this.soldout);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(NUMBER_DECIMAL_PERMITED_FIELD_DESC);
    oprot.writeBool(this.numberDecimalPermited);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Goods(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shortName:");
    if (this.shortName == null) {
      sb.append("null");
    } else {
      sb.append(this.shortName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("introduction:");
    if (this.introduction == null) {
      sb.append("null");
    } else {
      sb.append(this.introduction);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("material:");
    if (this.material == null) {
      sb.append("null");
    } else {
      sb.append(this.material);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("condiments:");
    if (this.condiments == null) {
      sb.append("null");
    } else {
      sb.append(this.condiments);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imgs:");
    if (this.imgs == null) {
      sb.append("null");
    } else {
      sb.append(this.imgs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("category:");
    if (this.category == null) {
      sb.append("null");
    } else {
      sb.append(this.category);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("onSales:");
    sb.append(this.onSales);
    first = false;
    if (!first) sb.append(", ");
    sb.append("spicy:");
    sb.append(this.spicy);
    first = false;
    if (!first) sb.append(", ");
    sb.append("soldout:");
    sb.append(this.soldout);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numberDecimalPermited:");
    sb.append(this.numberDecimalPermited);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

