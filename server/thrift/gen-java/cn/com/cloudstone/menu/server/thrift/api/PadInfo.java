/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.com.cloudstone.menu.server.thrift.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PadInfo implements org.apache.thrift.TBase<PadInfo, PadInfo._Fields>, java.io.Serializable, Cloneable, Comparable<PadInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PadInfo");

  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IMEI_FIELD_DESC = new org.apache.thrift.protocol.TField("IMEI", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BATTERY_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("batteryLevel", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RESTAURENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("restaurentId", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PadInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PadInfoTupleSchemeFactory());
  }

  public String sessionId; // required
  public String IMEI; // required
  public int batteryLevel; // required
  public int restaurentId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SESSION_ID((short)1, "sessionId"),
    IMEI((short)2, "IMEI"),
    BATTERY_LEVEL((short)3, "batteryLevel"),
    RESTAURENT_ID((short)4, "restaurentId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SESSION_ID
          return SESSION_ID;
        case 2: // IMEI
          return IMEI;
        case 3: // BATTERY_LEVEL
          return BATTERY_LEVEL;
        case 4: // RESTAURENT_ID
          return RESTAURENT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BATTERYLEVEL_ISSET_ID = 0;
  private static final int __RESTAURENTID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMEI, new org.apache.thrift.meta_data.FieldMetaData("IMEI", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BATTERY_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("batteryLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESTAURENT_ID, new org.apache.thrift.meta_data.FieldMetaData("restaurentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PadInfo.class, metaDataMap);
  }

  public PadInfo() {
  }

  public PadInfo(
    String sessionId,
    String IMEI,
    int batteryLevel,
    int restaurentId)
  {
    this();
    this.sessionId = sessionId;
    this.IMEI = IMEI;
    this.batteryLevel = batteryLevel;
    setBatteryLevelIsSet(true);
    this.restaurentId = restaurentId;
    setRestaurentIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PadInfo(PadInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSessionId()) {
      this.sessionId = other.sessionId;
    }
    if (other.isSetIMEI()) {
      this.IMEI = other.IMEI;
    }
    this.batteryLevel = other.batteryLevel;
    this.restaurentId = other.restaurentId;
  }

  public PadInfo deepCopy() {
    return new PadInfo(this);
  }

  @Override
  public void clear() {
    this.sessionId = null;
    this.IMEI = null;
    setBatteryLevelIsSet(false);
    this.batteryLevel = 0;
    setRestaurentIdIsSet(false);
    this.restaurentId = 0;
  }

  public String getSessionId() {
    return this.sessionId;
  }

  public PadInfo setSessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  public void unsetSessionId() {
    this.sessionId = null;
  }

  /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionId() {
    return this.sessionId != null;
  }

  public void setSessionIdIsSet(boolean value) {
    if (!value) {
      this.sessionId = null;
    }
  }

  public String getIMEI() {
    return this.IMEI;
  }

  public PadInfo setIMEI(String IMEI) {
    this.IMEI = IMEI;
    return this;
  }

  public void unsetIMEI() {
    this.IMEI = null;
  }

  /** Returns true if field IMEI is set (has been assigned a value) and false otherwise */
  public boolean isSetIMEI() {
    return this.IMEI != null;
  }

  public void setIMEIIsSet(boolean value) {
    if (!value) {
      this.IMEI = null;
    }
  }

  public int getBatteryLevel() {
    return this.batteryLevel;
  }

  public PadInfo setBatteryLevel(int batteryLevel) {
    this.batteryLevel = batteryLevel;
    setBatteryLevelIsSet(true);
    return this;
  }

  public void unsetBatteryLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BATTERYLEVEL_ISSET_ID);
  }

  /** Returns true if field batteryLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetBatteryLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __BATTERYLEVEL_ISSET_ID);
  }

  public void setBatteryLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BATTERYLEVEL_ISSET_ID, value);
  }

  public int getRestaurentId() {
    return this.restaurentId;
  }

  public PadInfo setRestaurentId(int restaurentId) {
    this.restaurentId = restaurentId;
    setRestaurentIdIsSet(true);
    return this;
  }

  public void unsetRestaurentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESTAURENTID_ISSET_ID);
  }

  /** Returns true if field restaurentId is set (has been assigned a value) and false otherwise */
  public boolean isSetRestaurentId() {
    return EncodingUtils.testBit(__isset_bitfield, __RESTAURENTID_ISSET_ID);
  }

  public void setRestaurentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESTAURENTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SESSION_ID:
      if (value == null) {
        unsetSessionId();
      } else {
        setSessionId((String)value);
      }
      break;

    case IMEI:
      if (value == null) {
        unsetIMEI();
      } else {
        setIMEI((String)value);
      }
      break;

    case BATTERY_LEVEL:
      if (value == null) {
        unsetBatteryLevel();
      } else {
        setBatteryLevel((Integer)value);
      }
      break;

    case RESTAURENT_ID:
      if (value == null) {
        unsetRestaurentId();
      } else {
        setRestaurentId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SESSION_ID:
      return getSessionId();

    case IMEI:
      return getIMEI();

    case BATTERY_LEVEL:
      return Integer.valueOf(getBatteryLevel());

    case RESTAURENT_ID:
      return Integer.valueOf(getRestaurentId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SESSION_ID:
      return isSetSessionId();
    case IMEI:
      return isSetIMEI();
    case BATTERY_LEVEL:
      return isSetBatteryLevel();
    case RESTAURENT_ID:
      return isSetRestaurentId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PadInfo)
      return this.equals((PadInfo)that);
    return false;
  }

  public boolean equals(PadInfo that) {
    if (that == null)
      return false;

    boolean this_present_sessionId = true && this.isSetSessionId();
    boolean that_present_sessionId = true && that.isSetSessionId();
    if (this_present_sessionId || that_present_sessionId) {
      if (!(this_present_sessionId && that_present_sessionId))
        return false;
      if (!this.sessionId.equals(that.sessionId))
        return false;
    }

    boolean this_present_IMEI = true && this.isSetIMEI();
    boolean that_present_IMEI = true && that.isSetIMEI();
    if (this_present_IMEI || that_present_IMEI) {
      if (!(this_present_IMEI && that_present_IMEI))
        return false;
      if (!this.IMEI.equals(that.IMEI))
        return false;
    }

    boolean this_present_batteryLevel = true;
    boolean that_present_batteryLevel = true;
    if (this_present_batteryLevel || that_present_batteryLevel) {
      if (!(this_present_batteryLevel && that_present_batteryLevel))
        return false;
      if (this.batteryLevel != that.batteryLevel)
        return false;
    }

    boolean this_present_restaurentId = true;
    boolean that_present_restaurentId = true;
    if (this_present_restaurentId || that_present_restaurentId) {
      if (!(this_present_restaurentId && that_present_restaurentId))
        return false;
      if (this.restaurentId != that.restaurentId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PadInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIMEI()).compareTo(other.isSetIMEI());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIMEI()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IMEI, other.IMEI);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatteryLevel()).compareTo(other.isSetBatteryLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatteryLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batteryLevel, other.batteryLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRestaurentId()).compareTo(other.isSetRestaurentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRestaurentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.restaurentId, other.restaurentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PadInfo(");
    boolean first = true;

    sb.append("sessionId:");
    if (this.sessionId == null) {
      sb.append("null");
    } else {
      sb.append(this.sessionId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("IMEI:");
    if (this.IMEI == null) {
      sb.append("null");
    } else {
      sb.append(this.IMEI);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("batteryLevel:");
    sb.append(this.batteryLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("restaurentId:");
    sb.append(this.restaurentId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PadInfoStandardSchemeFactory implements SchemeFactory {
    public PadInfoStandardScheme getScheme() {
      return new PadInfoStandardScheme();
    }
  }

  private static class PadInfoStandardScheme extends StandardScheme<PadInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PadInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sessionId = iprot.readString();
              struct.setSessionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IMEI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.IMEI = iprot.readString();
              struct.setIMEIIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BATTERY_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.batteryLevel = iprot.readI32();
              struct.setBatteryLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RESTAURENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.restaurentId = iprot.readI32();
              struct.setRestaurentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PadInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(struct.sessionId);
        oprot.writeFieldEnd();
      }
      if (struct.IMEI != null) {
        oprot.writeFieldBegin(IMEI_FIELD_DESC);
        oprot.writeString(struct.IMEI);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BATTERY_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.batteryLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESTAURENT_ID_FIELD_DESC);
      oprot.writeI32(struct.restaurentId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PadInfoTupleSchemeFactory implements SchemeFactory {
    public PadInfoTupleScheme getScheme() {
      return new PadInfoTupleScheme();
    }
  }

  private static class PadInfoTupleScheme extends TupleScheme<PadInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PadInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSessionId()) {
        optionals.set(0);
      }
      if (struct.isSetIMEI()) {
        optionals.set(1);
      }
      if (struct.isSetBatteryLevel()) {
        optionals.set(2);
      }
      if (struct.isSetRestaurentId()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSessionId()) {
        oprot.writeString(struct.sessionId);
      }
      if (struct.isSetIMEI()) {
        oprot.writeString(struct.IMEI);
      }
      if (struct.isSetBatteryLevel()) {
        oprot.writeI32(struct.batteryLevel);
      }
      if (struct.isSetRestaurentId()) {
        oprot.writeI32(struct.restaurentId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PadInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.sessionId = iprot.readString();
        struct.setSessionIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.IMEI = iprot.readString();
        struct.setIMEIIsSet(true);
      }
      if (incoming.get(2)) {
        struct.batteryLevel = iprot.readI32();
        struct.setBatteryLevelIsSet(true);
      }
      if (incoming.get(3)) {
        struct.restaurentId = iprot.readI32();
        struct.setRestaurentIdIsSet(true);
      }
    }
  }

}

