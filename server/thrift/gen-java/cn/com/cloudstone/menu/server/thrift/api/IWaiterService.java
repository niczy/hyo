/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.com.cloudstone.menu.server.thrift.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class IWaiterService {

  public interface Iface {

    public boolean occupyTable(String sessionId, String tableId, int customNumber) throws cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException, PermissionDenyExcpetion, TableOccupiedException, org.apache.thrift.TException;

    /**
     * 查询所有餐桌状态
     * 
     * @param sessionId
     */
    public List<TableInfo> queryTableInfos(String sessionId) throws cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException, PermissionDenyExcpetion, org.apache.thrift.TException;

    public boolean changeTable(String sessionId, String oldTableId, String newTableId) throws cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException, PermissionDenyExcpetion, TableOccupiedException, org.apache.thrift.TException;

    public boolean mergeTable(String sessionId, List<String> oldTableIds, String newTableId) throws cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException, PermissionDenyExcpetion, TableOccupiedException, org.apache.thrift.TException;

    public boolean emptyTable(String sessionId, String tableId) throws cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException, PermissionDenyExcpetion, org.apache.thrift.TException;

    /**
     * 呼叫服务
     * 
     * @param sessionId
     * @param tableId
     * @param type
     */
    public boolean callService(String sessionId, String tableId, ServiceType type) throws cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException, TableEmptyException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void occupyTable(String sessionId, String tableId, int customNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryTableInfos(String sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void changeTable(String sessionId, String oldTableId, String newTableId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void mergeTable(String sessionId, List<String> oldTableIds, String newTableId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void emptyTable(String sessionId, String tableId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void callService(String sessionId, String tableId, ServiceType type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean occupyTable(String sessionId, String tableId, int customNumber) throws cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException, PermissionDenyExcpetion, TableOccupiedException, org.apache.thrift.TException
    {
      send_occupyTable(sessionId, tableId, customNumber);
      return recv_occupyTable();
    }

    public void send_occupyTable(String sessionId, String tableId, int customNumber) throws org.apache.thrift.TException
    {
      occupyTable_args args = new occupyTable_args();
      args.setSessionId(sessionId);
      args.setTableId(tableId);
      args.setCustomNumber(customNumber);
      sendBase("occupyTable", args);
    }

    public boolean recv_occupyTable() throws cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException, PermissionDenyExcpetion, TableOccupiedException, org.apache.thrift.TException
    {
      occupyTable_result result = new occupyTable_result();
      receiveBase(result, "occupyTable");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.pe != null) {
        throw result.pe;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "occupyTable failed: unknown result");
    }

    public List<TableInfo> queryTableInfos(String sessionId) throws cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException, PermissionDenyExcpetion, org.apache.thrift.TException
    {
      send_queryTableInfos(sessionId);
      return recv_queryTableInfos();
    }

    public void send_queryTableInfos(String sessionId) throws org.apache.thrift.TException
    {
      queryTableInfos_args args = new queryTableInfos_args();
      args.setSessionId(sessionId);
      sendBase("queryTableInfos", args);
    }

    public List<TableInfo> recv_queryTableInfos() throws cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException, PermissionDenyExcpetion, org.apache.thrift.TException
    {
      queryTableInfos_result result = new queryTableInfos_result();
      receiveBase(result, "queryTableInfos");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.pe != null) {
        throw result.pe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryTableInfos failed: unknown result");
    }

    public boolean changeTable(String sessionId, String oldTableId, String newTableId) throws cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException, PermissionDenyExcpetion, TableOccupiedException, org.apache.thrift.TException
    {
      send_changeTable(sessionId, oldTableId, newTableId);
      return recv_changeTable();
    }

    public void send_changeTable(String sessionId, String oldTableId, String newTableId) throws org.apache.thrift.TException
    {
      changeTable_args args = new changeTable_args();
      args.setSessionId(sessionId);
      args.setOldTableId(oldTableId);
      args.setNewTableId(newTableId);
      sendBase("changeTable", args);
    }

    public boolean recv_changeTable() throws cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException, PermissionDenyExcpetion, TableOccupiedException, org.apache.thrift.TException
    {
      changeTable_result result = new changeTable_result();
      receiveBase(result, "changeTable");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.pe != null) {
        throw result.pe;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "changeTable failed: unknown result");
    }

    public boolean mergeTable(String sessionId, List<String> oldTableIds, String newTableId) throws cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException, PermissionDenyExcpetion, TableOccupiedException, org.apache.thrift.TException
    {
      send_mergeTable(sessionId, oldTableIds, newTableId);
      return recv_mergeTable();
    }

    public void send_mergeTable(String sessionId, List<String> oldTableIds, String newTableId) throws org.apache.thrift.TException
    {
      mergeTable_args args = new mergeTable_args();
      args.setSessionId(sessionId);
      args.setOldTableIds(oldTableIds);
      args.setNewTableId(newTableId);
      sendBase("mergeTable", args);
    }

    public boolean recv_mergeTable() throws cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException, PermissionDenyExcpetion, TableOccupiedException, org.apache.thrift.TException
    {
      mergeTable_result result = new mergeTable_result();
      receiveBase(result, "mergeTable");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.pe != null) {
        throw result.pe;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "mergeTable failed: unknown result");
    }

    public boolean emptyTable(String sessionId, String tableId) throws cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException, PermissionDenyExcpetion, org.apache.thrift.TException
    {
      send_emptyTable(sessionId, tableId);
      return recv_emptyTable();
    }

    public void send_emptyTable(String sessionId, String tableId) throws org.apache.thrift.TException
    {
      emptyTable_args args = new emptyTable_args();
      args.setSessionId(sessionId);
      args.setTableId(tableId);
      sendBase("emptyTable", args);
    }

    public boolean recv_emptyTable() throws cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException, PermissionDenyExcpetion, org.apache.thrift.TException
    {
      emptyTable_result result = new emptyTable_result();
      receiveBase(result, "emptyTable");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.pe != null) {
        throw result.pe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "emptyTable failed: unknown result");
    }

    public boolean callService(String sessionId, String tableId, ServiceType type) throws cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException, TableEmptyException, org.apache.thrift.TException
    {
      send_callService(sessionId, tableId, type);
      return recv_callService();
    }

    public void send_callService(String sessionId, String tableId, ServiceType type) throws org.apache.thrift.TException
    {
      callService_args args = new callService_args();
      args.setSessionId(sessionId);
      args.setTableId(tableId);
      args.setType(type);
      sendBase("callService", args);
    }

    public boolean recv_callService() throws cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException, TableEmptyException, org.apache.thrift.TException
    {
      callService_result result = new callService_result();
      receiveBase(result, "callService");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "callService failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void occupyTable(String sessionId, String tableId, int customNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      occupyTable_call method_call = new occupyTable_call(sessionId, tableId, customNumber, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class occupyTable_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      private String tableId;
      private int customNumber;
      public occupyTable_call(String sessionId, String tableId, int customNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.tableId = tableId;
        this.customNumber = customNumber;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("occupyTable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        occupyTable_args args = new occupyTable_args();
        args.setSessionId(sessionId);
        args.setTableId(tableId);
        args.setCustomNumber(customNumber);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException, PermissionDenyExcpetion, TableOccupiedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_occupyTable();
      }
    }

    public void queryTableInfos(String sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryTableInfos_call method_call = new queryTableInfos_call(sessionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryTableInfos_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      public queryTableInfos_call(String sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryTableInfos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryTableInfos_args args = new queryTableInfos_args();
        args.setSessionId(sessionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TableInfo> getResult() throws cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException, PermissionDenyExcpetion, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryTableInfos();
      }
    }

    public void changeTable(String sessionId, String oldTableId, String newTableId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changeTable_call method_call = new changeTable_call(sessionId, oldTableId, newTableId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changeTable_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      private String oldTableId;
      private String newTableId;
      public changeTable_call(String sessionId, String oldTableId, String newTableId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.oldTableId = oldTableId;
        this.newTableId = newTableId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changeTable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changeTable_args args = new changeTable_args();
        args.setSessionId(sessionId);
        args.setOldTableId(oldTableId);
        args.setNewTableId(newTableId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException, PermissionDenyExcpetion, TableOccupiedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_changeTable();
      }
    }

    public void mergeTable(String sessionId, List<String> oldTableIds, String newTableId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mergeTable_call method_call = new mergeTable_call(sessionId, oldTableIds, newTableId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mergeTable_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      private List<String> oldTableIds;
      private String newTableId;
      public mergeTable_call(String sessionId, List<String> oldTableIds, String newTableId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.oldTableIds = oldTableIds;
        this.newTableId = newTableId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mergeTable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mergeTable_args args = new mergeTable_args();
        args.setSessionId(sessionId);
        args.setOldTableIds(oldTableIds);
        args.setNewTableId(newTableId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException, PermissionDenyExcpetion, TableOccupiedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_mergeTable();
      }
    }

    public void emptyTable(String sessionId, String tableId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      emptyTable_call method_call = new emptyTable_call(sessionId, tableId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class emptyTable_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      private String tableId;
      public emptyTable_call(String sessionId, String tableId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.tableId = tableId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("emptyTable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        emptyTable_args args = new emptyTable_args();
        args.setSessionId(sessionId);
        args.setTableId(tableId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException, PermissionDenyExcpetion, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_emptyTable();
      }
    }

    public void callService(String sessionId, String tableId, ServiceType type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      callService_call method_call = new callService_call(sessionId, tableId, type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class callService_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      private String tableId;
      private ServiceType type;
      public callService_call(String sessionId, String tableId, ServiceType type, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.tableId = tableId;
        this.type = type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("callService", org.apache.thrift.protocol.TMessageType.CALL, 0));
        callService_args args = new callService_args();
        args.setSessionId(sessionId);
        args.setTableId(tableId);
        args.setType(type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException, TableEmptyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_callService();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("occupyTable", new occupyTable());
      processMap.put("queryTableInfos", new queryTableInfos());
      processMap.put("changeTable", new changeTable());
      processMap.put("mergeTable", new mergeTable());
      processMap.put("emptyTable", new emptyTable());
      processMap.put("callService", new callService());
      return processMap;
    }

    public static class occupyTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, occupyTable_args> {
      public occupyTable() {
        super("occupyTable");
      }

      public occupyTable_args getEmptyArgsInstance() {
        return new occupyTable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public occupyTable_result getResult(I iface, occupyTable_args args) throws org.apache.thrift.TException {
        occupyTable_result result = new occupyTable_result();
        try {
          result.success = iface.occupyTable(args.sessionId, args.tableId, args.customNumber);
          result.setSuccessIsSet(true);
        } catch (cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException ue) {
          result.ue = ue;
        } catch (PermissionDenyExcpetion pe) {
          result.pe = pe;
        } catch (TableOccupiedException te) {
          result.te = te;
        }
        return result;
      }
    }

    public static class queryTableInfos<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryTableInfos_args> {
      public queryTableInfos() {
        super("queryTableInfos");
      }

      public queryTableInfos_args getEmptyArgsInstance() {
        return new queryTableInfos_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryTableInfos_result getResult(I iface, queryTableInfos_args args) throws org.apache.thrift.TException {
        queryTableInfos_result result = new queryTableInfos_result();
        try {
          result.success = iface.queryTableInfos(args.sessionId);
        } catch (cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException ue) {
          result.ue = ue;
        } catch (PermissionDenyExcpetion pe) {
          result.pe = pe;
        }
        return result;
      }
    }

    public static class changeTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changeTable_args> {
      public changeTable() {
        super("changeTable");
      }

      public changeTable_args getEmptyArgsInstance() {
        return new changeTable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public changeTable_result getResult(I iface, changeTable_args args) throws org.apache.thrift.TException {
        changeTable_result result = new changeTable_result();
        try {
          result.success = iface.changeTable(args.sessionId, args.oldTableId, args.newTableId);
          result.setSuccessIsSet(true);
        } catch (cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException ue) {
          result.ue = ue;
        } catch (PermissionDenyExcpetion pe) {
          result.pe = pe;
        } catch (TableOccupiedException te) {
          result.te = te;
        }
        return result;
      }
    }

    public static class mergeTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mergeTable_args> {
      public mergeTable() {
        super("mergeTable");
      }

      public mergeTable_args getEmptyArgsInstance() {
        return new mergeTable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public mergeTable_result getResult(I iface, mergeTable_args args) throws org.apache.thrift.TException {
        mergeTable_result result = new mergeTable_result();
        try {
          result.success = iface.mergeTable(args.sessionId, args.oldTableIds, args.newTableId);
          result.setSuccessIsSet(true);
        } catch (cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException ue) {
          result.ue = ue;
        } catch (PermissionDenyExcpetion pe) {
          result.pe = pe;
        } catch (TableOccupiedException te) {
          result.te = te;
        }
        return result;
      }
    }

    public static class emptyTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, emptyTable_args> {
      public emptyTable() {
        super("emptyTable");
      }

      public emptyTable_args getEmptyArgsInstance() {
        return new emptyTable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public emptyTable_result getResult(I iface, emptyTable_args args) throws org.apache.thrift.TException {
        emptyTable_result result = new emptyTable_result();
        try {
          result.success = iface.emptyTable(args.sessionId, args.tableId);
          result.setSuccessIsSet(true);
        } catch (cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException ue) {
          result.ue = ue;
        } catch (PermissionDenyExcpetion pe) {
          result.pe = pe;
        }
        return result;
      }
    }

    public static class callService<I extends Iface> extends org.apache.thrift.ProcessFunction<I, callService_args> {
      public callService() {
        super("callService");
      }

      public callService_args getEmptyArgsInstance() {
        return new callService_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public callService_result getResult(I iface, callService_args args) throws org.apache.thrift.TException {
        callService_result result = new callService_result();
        try {
          result.success = iface.callService(args.sessionId, args.tableId, args.type);
          result.setSuccessIsSet(true);
        } catch (cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException ue) {
          result.ue = ue;
        } catch (TableEmptyException te) {
          result.te = te;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("occupyTable", new occupyTable());
      processMap.put("queryTableInfos", new queryTableInfos());
      processMap.put("changeTable", new changeTable());
      processMap.put("mergeTable", new mergeTable());
      processMap.put("emptyTable", new emptyTable());
      processMap.put("callService", new callService());
      return processMap;
    }

    public static class occupyTable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, occupyTable_args, Boolean> {
      public occupyTable() {
        super("occupyTable");
      }

      public occupyTable_args getEmptyArgsInstance() {
        return new occupyTable_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            occupyTable_result result = new occupyTable_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            occupyTable_result result = new occupyTable_result();
            if (e instanceof cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException) {
                        result.ue = (cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof PermissionDenyExcpetion) {
                        result.pe = (PermissionDenyExcpetion) e;
                        result.setPeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TableOccupiedException) {
                        result.te = (TableOccupiedException) e;
                        result.setTeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, occupyTable_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.occupyTable(args.sessionId, args.tableId, args.customNumber,resultHandler);
      }
    }

    public static class queryTableInfos<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryTableInfos_args, List<TableInfo>> {
      public queryTableInfos() {
        super("queryTableInfos");
      }

      public queryTableInfos_args getEmptyArgsInstance() {
        return new queryTableInfos_args();
      }

      public AsyncMethodCallback<List<TableInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TableInfo>>() { 
          public void onComplete(List<TableInfo> o) {
            queryTableInfos_result result = new queryTableInfos_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryTableInfos_result result = new queryTableInfos_result();
            if (e instanceof cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException) {
                        result.ue = (cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof PermissionDenyExcpetion) {
                        result.pe = (PermissionDenyExcpetion) e;
                        result.setPeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryTableInfos_args args, org.apache.thrift.async.AsyncMethodCallback<List<TableInfo>> resultHandler) throws TException {
        iface.queryTableInfos(args.sessionId,resultHandler);
      }
    }

    public static class changeTable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changeTable_args, Boolean> {
      public changeTable() {
        super("changeTable");
      }

      public changeTable_args getEmptyArgsInstance() {
        return new changeTable_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            changeTable_result result = new changeTable_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            changeTable_result result = new changeTable_result();
            if (e instanceof cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException) {
                        result.ue = (cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof PermissionDenyExcpetion) {
                        result.pe = (PermissionDenyExcpetion) e;
                        result.setPeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TableOccupiedException) {
                        result.te = (TableOccupiedException) e;
                        result.setTeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, changeTable_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.changeTable(args.sessionId, args.oldTableId, args.newTableId,resultHandler);
      }
    }

    public static class mergeTable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mergeTable_args, Boolean> {
      public mergeTable() {
        super("mergeTable");
      }

      public mergeTable_args getEmptyArgsInstance() {
        return new mergeTable_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            mergeTable_result result = new mergeTable_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            mergeTable_result result = new mergeTable_result();
            if (e instanceof cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException) {
                        result.ue = (cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof PermissionDenyExcpetion) {
                        result.pe = (PermissionDenyExcpetion) e;
                        result.setPeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TableOccupiedException) {
                        result.te = (TableOccupiedException) e;
                        result.setTeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, mergeTable_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.mergeTable(args.sessionId, args.oldTableIds, args.newTableId,resultHandler);
      }
    }

    public static class emptyTable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, emptyTable_args, Boolean> {
      public emptyTable() {
        super("emptyTable");
      }

      public emptyTable_args getEmptyArgsInstance() {
        return new emptyTable_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            emptyTable_result result = new emptyTable_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            emptyTable_result result = new emptyTable_result();
            if (e instanceof cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException) {
                        result.ue = (cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof PermissionDenyExcpetion) {
                        result.pe = (PermissionDenyExcpetion) e;
                        result.setPeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, emptyTable_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.emptyTable(args.sessionId, args.tableId,resultHandler);
      }
    }

    public static class callService<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, callService_args, Boolean> {
      public callService() {
        super("callService");
      }

      public callService_args getEmptyArgsInstance() {
        return new callService_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            callService_result result = new callService_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            callService_result result = new callService_result();
            if (e instanceof cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException) {
                        result.ue = (cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TableEmptyException) {
                        result.te = (TableEmptyException) e;
                        result.setTeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, callService_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.callService(args.sessionId, args.tableId, args.type,resultHandler);
      }
    }

  }

  public static class occupyTable_args implements org.apache.thrift.TBase<occupyTable_args, occupyTable_args._Fields>, java.io.Serializable, Cloneable, Comparable<occupyTable_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("occupyTable_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tableId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CUSTOM_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("customNumber", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new occupyTable_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new occupyTable_argsTupleSchemeFactory());
    }

    public String sessionId; // required
    public String tableId; // required
    public int customNumber; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      TABLE_ID((short)2, "tableId"),
      CUSTOM_NUMBER((short)3, "customNumber");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // TABLE_ID
            return TABLE_ID;
          case 3: // CUSTOM_NUMBER
            return CUSTOM_NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CUSTOMNUMBER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("tableId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CUSTOM_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("customNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(occupyTable_args.class, metaDataMap);
    }

    public occupyTable_args() {
    }

    public occupyTable_args(
      String sessionId,
      String tableId,
      int customNumber)
    {
      this();
      this.sessionId = sessionId;
      this.tableId = tableId;
      this.customNumber = customNumber;
      setCustomNumberIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public occupyTable_args(occupyTable_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      if (other.isSetTableId()) {
        this.tableId = other.tableId;
      }
      this.customNumber = other.customNumber;
    }

    public occupyTable_args deepCopy() {
      return new occupyTable_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
      this.tableId = null;
      setCustomNumberIsSet(false);
      this.customNumber = 0;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public occupyTable_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public String getTableId() {
      return this.tableId;
    }

    public occupyTable_args setTableId(String tableId) {
      this.tableId = tableId;
      return this;
    }

    public void unsetTableId() {
      this.tableId = null;
    }

    /** Returns true if field tableId is set (has been assigned a value) and false otherwise */
    public boolean isSetTableId() {
      return this.tableId != null;
    }

    public void setTableIdIsSet(boolean value) {
      if (!value) {
        this.tableId = null;
      }
    }

    public int getCustomNumber() {
      return this.customNumber;
    }

    public occupyTable_args setCustomNumber(int customNumber) {
      this.customNumber = customNumber;
      setCustomNumberIsSet(true);
      return this;
    }

    public void unsetCustomNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSTOMNUMBER_ISSET_ID);
    }

    /** Returns true if field customNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetCustomNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __CUSTOMNUMBER_ISSET_ID);
    }

    public void setCustomNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSTOMNUMBER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      case TABLE_ID:
        if (value == null) {
          unsetTableId();
        } else {
          setTableId((String)value);
        }
        break;

      case CUSTOM_NUMBER:
        if (value == null) {
          unsetCustomNumber();
        } else {
          setCustomNumber((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      case TABLE_ID:
        return getTableId();

      case CUSTOM_NUMBER:
        return Integer.valueOf(getCustomNumber());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case TABLE_ID:
        return isSetTableId();
      case CUSTOM_NUMBER:
        return isSetCustomNumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof occupyTable_args)
        return this.equals((occupyTable_args)that);
      return false;
    }

    public boolean equals(occupyTable_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_tableId = true && this.isSetTableId();
      boolean that_present_tableId = true && that.isSetTableId();
      if (this_present_tableId || that_present_tableId) {
        if (!(this_present_tableId && that_present_tableId))
          return false;
        if (!this.tableId.equals(that.tableId))
          return false;
      }

      boolean this_present_customNumber = true;
      boolean that_present_customNumber = true;
      if (this_present_customNumber || that_present_customNumber) {
        if (!(this_present_customNumber && that_present_customNumber))
          return false;
        if (this.customNumber != that.customNumber)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(occupyTable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableId()).compareTo(other.isSetTableId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableId, other.tableId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCustomNumber()).compareTo(other.isSetCustomNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCustomNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customNumber, other.customNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("occupyTable_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableId:");
      if (this.tableId == null) {
        sb.append("null");
      } else {
        sb.append(this.tableId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("customNumber:");
      sb.append(this.customNumber);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class occupyTable_argsStandardSchemeFactory implements SchemeFactory {
      public occupyTable_argsStandardScheme getScheme() {
        return new occupyTable_argsStandardScheme();
      }
    }

    private static class occupyTable_argsStandardScheme extends StandardScheme<occupyTable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, occupyTable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableId = iprot.readString();
                struct.setTableIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CUSTOM_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.customNumber = iprot.readI32();
                struct.setCustomNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, occupyTable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        if (struct.tableId != null) {
          oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
          oprot.writeString(struct.tableId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CUSTOM_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.customNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class occupyTable_argsTupleSchemeFactory implements SchemeFactory {
      public occupyTable_argsTupleScheme getScheme() {
        return new occupyTable_argsTupleScheme();
      }
    }

    private static class occupyTable_argsTupleScheme extends TupleScheme<occupyTable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, occupyTable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        if (struct.isSetTableId()) {
          optionals.set(1);
        }
        if (struct.isSetCustomNumber()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
        if (struct.isSetTableId()) {
          oprot.writeString(struct.tableId);
        }
        if (struct.isSetCustomNumber()) {
          oprot.writeI32(struct.customNumber);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, occupyTable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableId = iprot.readString();
          struct.setTableIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.customNumber = iprot.readI32();
          struct.setCustomNumberIsSet(true);
        }
      }
    }

  }

  public static class occupyTable_result implements org.apache.thrift.TBase<occupyTable_result, occupyTable_result._Fields>, java.io.Serializable, Cloneable, Comparable<occupyTable_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("occupyTable_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PE_FIELD_DESC = new org.apache.thrift.protocol.TField("pe", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new occupyTable_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new occupyTable_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException ue; // required
    public PermissionDenyExcpetion pe; // required
    public TableOccupiedException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UE((short)1, "ue"),
      PE((short)2, "pe"),
      TE((short)3, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UE
            return UE;
          case 2: // PE
            return PE;
          case 3: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.PE, new org.apache.thrift.meta_data.FieldMetaData("pe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(occupyTable_result.class, metaDataMap);
    }

    public occupyTable_result() {
    }

    public occupyTable_result(
      boolean success,
      cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException ue,
      PermissionDenyExcpetion pe,
      TableOccupiedException te)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ue = ue;
      this.pe = pe;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public occupyTable_result(occupyTable_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetUe()) {
        this.ue = new cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException(other.ue);
      }
      if (other.isSetPe()) {
        this.pe = new PermissionDenyExcpetion(other.pe);
      }
      if (other.isSetTe()) {
        this.te = new TableOccupiedException(other.te);
      }
    }

    public occupyTable_result deepCopy() {
      return new occupyTable_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ue = null;
      this.pe = null;
      this.te = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public occupyTable_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException getUe() {
      return this.ue;
    }

    public occupyTable_result setUe(cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public PermissionDenyExcpetion getPe() {
      return this.pe;
    }

    public occupyTable_result setPe(PermissionDenyExcpetion pe) {
      this.pe = pe;
      return this;
    }

    public void unsetPe() {
      this.pe = null;
    }

    /** Returns true if field pe is set (has been assigned a value) and false otherwise */
    public boolean isSetPe() {
      return this.pe != null;
    }

    public void setPeIsSet(boolean value) {
      if (!value) {
        this.pe = null;
      }
    }

    public TableOccupiedException getTe() {
      return this.te;
    }

    public occupyTable_result setTe(TableOccupiedException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException)value);
        }
        break;

      case PE:
        if (value == null) {
          unsetPe();
        } else {
          setPe((PermissionDenyExcpetion)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((TableOccupiedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case UE:
        return getUe();

      case PE:
        return getPe();

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UE:
        return isSetUe();
      case PE:
        return isSetPe();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof occupyTable_result)
        return this.equals((occupyTable_result)that);
      return false;
    }

    public boolean equals(occupyTable_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_pe = true && this.isSetPe();
      boolean that_present_pe = true && that.isSetPe();
      if (this_present_pe || that_present_pe) {
        if (!(this_present_pe && that_present_pe))
          return false;
        if (!this.pe.equals(that.pe))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(occupyTable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPe()).compareTo(other.isSetPe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pe, other.pe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(other.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, other.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("occupyTable_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pe:");
      if (this.pe == null) {
        sb.append("null");
      } else {
        sb.append(this.pe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class occupyTable_resultStandardSchemeFactory implements SchemeFactory {
      public occupyTable_resultStandardScheme getScheme() {
        return new occupyTable_resultStandardScheme();
      }
    }

    private static class occupyTable_resultStandardScheme extends StandardScheme<occupyTable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, occupyTable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pe = new PermissionDenyExcpetion();
                struct.pe.read(iprot);
                struct.setPeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new TableOccupiedException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, occupyTable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pe != null) {
          oprot.writeFieldBegin(PE_FIELD_DESC);
          struct.pe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class occupyTable_resultTupleSchemeFactory implements SchemeFactory {
      public occupyTable_resultTupleScheme getScheme() {
        return new occupyTable_resultTupleScheme();
      }
    }

    private static class occupyTable_resultTupleScheme extends TupleScheme<occupyTable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, occupyTable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUe()) {
          optionals.set(1);
        }
        if (struct.isSetPe()) {
          optionals.set(2);
        }
        if (struct.isSetTe()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetPe()) {
          struct.pe.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, occupyTable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ue = new cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pe = new PermissionDenyExcpetion();
          struct.pe.read(iprot);
          struct.setPeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.te = new TableOccupiedException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

  public static class queryTableInfos_args implements org.apache.thrift.TBase<queryTableInfos_args, queryTableInfos_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryTableInfos_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTableInfos_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryTableInfos_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryTableInfos_argsTupleSchemeFactory());
    }

    public String sessionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTableInfos_args.class, metaDataMap);
    }

    public queryTableInfos_args() {
    }

    public queryTableInfos_args(
      String sessionId)
    {
      this();
      this.sessionId = sessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTableInfos_args(queryTableInfos_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
    }

    public queryTableInfos_args deepCopy() {
      return new queryTableInfos_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public queryTableInfos_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTableInfos_args)
        return this.equals((queryTableInfos_args)that);
      return false;
    }

    public boolean equals(queryTableInfos_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryTableInfos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryTableInfos_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTableInfos_argsStandardSchemeFactory implements SchemeFactory {
      public queryTableInfos_argsStandardScheme getScheme() {
        return new queryTableInfos_argsStandardScheme();
      }
    }

    private static class queryTableInfos_argsStandardScheme extends StandardScheme<queryTableInfos_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTableInfos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTableInfos_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTableInfos_argsTupleSchemeFactory implements SchemeFactory {
      public queryTableInfos_argsTupleScheme getScheme() {
        return new queryTableInfos_argsTupleScheme();
      }
    }

    private static class queryTableInfos_argsTupleScheme extends TupleScheme<queryTableInfos_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTableInfos_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTableInfos_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
      }
    }

  }

  public static class queryTableInfos_result implements org.apache.thrift.TBase<queryTableInfos_result, queryTableInfos_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryTableInfos_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTableInfos_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PE_FIELD_DESC = new org.apache.thrift.protocol.TField("pe", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryTableInfos_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryTableInfos_resultTupleSchemeFactory());
    }

    public List<TableInfo> success; // required
    public cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException ue; // required
    public PermissionDenyExcpetion pe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UE((short)1, "ue"),
      PE((short)2, "pe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UE
            return UE;
          case 2: // PE
            return PE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TableInfo.class))));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.PE, new org.apache.thrift.meta_data.FieldMetaData("pe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTableInfos_result.class, metaDataMap);
    }

    public queryTableInfos_result() {
    }

    public queryTableInfos_result(
      List<TableInfo> success,
      cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException ue,
      PermissionDenyExcpetion pe)
    {
      this();
      this.success = success;
      this.ue = ue;
      this.pe = pe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTableInfos_result(queryTableInfos_result other) {
      if (other.isSetSuccess()) {
        List<TableInfo> __this__success = new ArrayList<TableInfo>(other.success.size());
        for (TableInfo other_element : other.success) {
          __this__success.add(new TableInfo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetUe()) {
        this.ue = new cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException(other.ue);
      }
      if (other.isSetPe()) {
        this.pe = new PermissionDenyExcpetion(other.pe);
      }
    }

    public queryTableInfos_result deepCopy() {
      return new queryTableInfos_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ue = null;
      this.pe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TableInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TableInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<TableInfo>();
      }
      this.success.add(elem);
    }

    public List<TableInfo> getSuccess() {
      return this.success;
    }

    public queryTableInfos_result setSuccess(List<TableInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException getUe() {
      return this.ue;
    }

    public queryTableInfos_result setUe(cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public PermissionDenyExcpetion getPe() {
      return this.pe;
    }

    public queryTableInfos_result setPe(PermissionDenyExcpetion pe) {
      this.pe = pe;
      return this;
    }

    public void unsetPe() {
      this.pe = null;
    }

    /** Returns true if field pe is set (has been assigned a value) and false otherwise */
    public boolean isSetPe() {
      return this.pe != null;
    }

    public void setPeIsSet(boolean value) {
      if (!value) {
        this.pe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TableInfo>)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException)value);
        }
        break;

      case PE:
        if (value == null) {
          unsetPe();
        } else {
          setPe((PermissionDenyExcpetion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UE:
        return getUe();

      case PE:
        return getPe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UE:
        return isSetUe();
      case PE:
        return isSetPe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTableInfos_result)
        return this.equals((queryTableInfos_result)that);
      return false;
    }

    public boolean equals(queryTableInfos_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_pe = true && this.isSetPe();
      boolean that_present_pe = true && that.isSetPe();
      if (this_present_pe || that_present_pe) {
        if (!(this_present_pe && that_present_pe))
          return false;
        if (!this.pe.equals(that.pe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryTableInfos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPe()).compareTo(other.isSetPe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pe, other.pe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryTableInfos_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pe:");
      if (this.pe == null) {
        sb.append("null");
      } else {
        sb.append(this.pe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTableInfos_resultStandardSchemeFactory implements SchemeFactory {
      public queryTableInfos_resultStandardScheme getScheme() {
        return new queryTableInfos_resultStandardScheme();
      }
    }

    private static class queryTableInfos_resultStandardScheme extends StandardScheme<queryTableInfos_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTableInfos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<TableInfo>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    TableInfo _elem2;
                    _elem2 = new TableInfo();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pe = new PermissionDenyExcpetion();
                struct.pe.read(iprot);
                struct.setPeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTableInfos_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TableInfo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pe != null) {
          oprot.writeFieldBegin(PE_FIELD_DESC);
          struct.pe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTableInfos_resultTupleSchemeFactory implements SchemeFactory {
      public queryTableInfos_resultTupleScheme getScheme() {
        return new queryTableInfos_resultTupleScheme();
      }
    }

    private static class queryTableInfos_resultTupleScheme extends TupleScheme<queryTableInfos_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTableInfos_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUe()) {
          optionals.set(1);
        }
        if (struct.isSetPe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TableInfo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetPe()) {
          struct.pe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTableInfos_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TableInfo>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              TableInfo _elem7;
              _elem7 = new TableInfo();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ue = new cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pe = new PermissionDenyExcpetion();
          struct.pe.read(iprot);
          struct.setPeIsSet(true);
        }
      }
    }

  }

  public static class changeTable_args implements org.apache.thrift.TBase<changeTable_args, changeTable_args._Fields>, java.io.Serializable, Cloneable, Comparable<changeTable_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeTable_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OLD_TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("oldTableId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NEW_TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("newTableId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeTable_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeTable_argsTupleSchemeFactory());
    }

    public String sessionId; // required
    public String oldTableId; // required
    public String newTableId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      OLD_TABLE_ID((short)2, "oldTableId"),
      NEW_TABLE_ID((short)3, "newTableId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // OLD_TABLE_ID
            return OLD_TABLE_ID;
          case 3: // NEW_TABLE_ID
            return NEW_TABLE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OLD_TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("oldTableId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("newTableId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeTable_args.class, metaDataMap);
    }

    public changeTable_args() {
    }

    public changeTable_args(
      String sessionId,
      String oldTableId,
      String newTableId)
    {
      this();
      this.sessionId = sessionId;
      this.oldTableId = oldTableId;
      this.newTableId = newTableId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeTable_args(changeTable_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      if (other.isSetOldTableId()) {
        this.oldTableId = other.oldTableId;
      }
      if (other.isSetNewTableId()) {
        this.newTableId = other.newTableId;
      }
    }

    public changeTable_args deepCopy() {
      return new changeTable_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
      this.oldTableId = null;
      this.newTableId = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public changeTable_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public String getOldTableId() {
      return this.oldTableId;
    }

    public changeTable_args setOldTableId(String oldTableId) {
      this.oldTableId = oldTableId;
      return this;
    }

    public void unsetOldTableId() {
      this.oldTableId = null;
    }

    /** Returns true if field oldTableId is set (has been assigned a value) and false otherwise */
    public boolean isSetOldTableId() {
      return this.oldTableId != null;
    }

    public void setOldTableIdIsSet(boolean value) {
      if (!value) {
        this.oldTableId = null;
      }
    }

    public String getNewTableId() {
      return this.newTableId;
    }

    public changeTable_args setNewTableId(String newTableId) {
      this.newTableId = newTableId;
      return this;
    }

    public void unsetNewTableId() {
      this.newTableId = null;
    }

    /** Returns true if field newTableId is set (has been assigned a value) and false otherwise */
    public boolean isSetNewTableId() {
      return this.newTableId != null;
    }

    public void setNewTableIdIsSet(boolean value) {
      if (!value) {
        this.newTableId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      case OLD_TABLE_ID:
        if (value == null) {
          unsetOldTableId();
        } else {
          setOldTableId((String)value);
        }
        break;

      case NEW_TABLE_ID:
        if (value == null) {
          unsetNewTableId();
        } else {
          setNewTableId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      case OLD_TABLE_ID:
        return getOldTableId();

      case NEW_TABLE_ID:
        return getNewTableId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case OLD_TABLE_ID:
        return isSetOldTableId();
      case NEW_TABLE_ID:
        return isSetNewTableId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeTable_args)
        return this.equals((changeTable_args)that);
      return false;
    }

    public boolean equals(changeTable_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_oldTableId = true && this.isSetOldTableId();
      boolean that_present_oldTableId = true && that.isSetOldTableId();
      if (this_present_oldTableId || that_present_oldTableId) {
        if (!(this_present_oldTableId && that_present_oldTableId))
          return false;
        if (!this.oldTableId.equals(that.oldTableId))
          return false;
      }

      boolean this_present_newTableId = true && this.isSetNewTableId();
      boolean that_present_newTableId = true && that.isSetNewTableId();
      if (this_present_newTableId || that_present_newTableId) {
        if (!(this_present_newTableId && that_present_newTableId))
          return false;
        if (!this.newTableId.equals(that.newTableId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(changeTable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOldTableId()).compareTo(other.isSetOldTableId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldTableId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldTableId, other.oldTableId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewTableId()).compareTo(other.isSetNewTableId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewTableId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newTableId, other.newTableId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeTable_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oldTableId:");
      if (this.oldTableId == null) {
        sb.append("null");
      } else {
        sb.append(this.oldTableId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newTableId:");
      if (this.newTableId == null) {
        sb.append("null");
      } else {
        sb.append(this.newTableId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeTable_argsStandardSchemeFactory implements SchemeFactory {
      public changeTable_argsStandardScheme getScheme() {
        return new changeTable_argsStandardScheme();
      }
    }

    private static class changeTable_argsStandardScheme extends StandardScheme<changeTable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeTable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OLD_TABLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.oldTableId = iprot.readString();
                struct.setOldTableIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NEW_TABLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newTableId = iprot.readString();
                struct.setNewTableIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeTable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        if (struct.oldTableId != null) {
          oprot.writeFieldBegin(OLD_TABLE_ID_FIELD_DESC);
          oprot.writeString(struct.oldTableId);
          oprot.writeFieldEnd();
        }
        if (struct.newTableId != null) {
          oprot.writeFieldBegin(NEW_TABLE_ID_FIELD_DESC);
          oprot.writeString(struct.newTableId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeTable_argsTupleSchemeFactory implements SchemeFactory {
      public changeTable_argsTupleScheme getScheme() {
        return new changeTable_argsTupleScheme();
      }
    }

    private static class changeTable_argsTupleScheme extends TupleScheme<changeTable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeTable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        if (struct.isSetOldTableId()) {
          optionals.set(1);
        }
        if (struct.isSetNewTableId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
        if (struct.isSetOldTableId()) {
          oprot.writeString(struct.oldTableId);
        }
        if (struct.isSetNewTableId()) {
          oprot.writeString(struct.newTableId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeTable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oldTableId = iprot.readString();
          struct.setOldTableIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.newTableId = iprot.readString();
          struct.setNewTableIdIsSet(true);
        }
      }
    }

  }

  public static class changeTable_result implements org.apache.thrift.TBase<changeTable_result, changeTable_result._Fields>, java.io.Serializable, Cloneable, Comparable<changeTable_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeTable_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PE_FIELD_DESC = new org.apache.thrift.protocol.TField("pe", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeTable_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeTable_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException ue; // required
    public PermissionDenyExcpetion pe; // required
    public TableOccupiedException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UE((short)1, "ue"),
      PE((short)2, "pe"),
      TE((short)3, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UE
            return UE;
          case 2: // PE
            return PE;
          case 3: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.PE, new org.apache.thrift.meta_data.FieldMetaData("pe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeTable_result.class, metaDataMap);
    }

    public changeTable_result() {
    }

    public changeTable_result(
      boolean success,
      cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException ue,
      PermissionDenyExcpetion pe,
      TableOccupiedException te)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ue = ue;
      this.pe = pe;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeTable_result(changeTable_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetUe()) {
        this.ue = new cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException(other.ue);
      }
      if (other.isSetPe()) {
        this.pe = new PermissionDenyExcpetion(other.pe);
      }
      if (other.isSetTe()) {
        this.te = new TableOccupiedException(other.te);
      }
    }

    public changeTable_result deepCopy() {
      return new changeTable_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ue = null;
      this.pe = null;
      this.te = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public changeTable_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException getUe() {
      return this.ue;
    }

    public changeTable_result setUe(cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public PermissionDenyExcpetion getPe() {
      return this.pe;
    }

    public changeTable_result setPe(PermissionDenyExcpetion pe) {
      this.pe = pe;
      return this;
    }

    public void unsetPe() {
      this.pe = null;
    }

    /** Returns true if field pe is set (has been assigned a value) and false otherwise */
    public boolean isSetPe() {
      return this.pe != null;
    }

    public void setPeIsSet(boolean value) {
      if (!value) {
        this.pe = null;
      }
    }

    public TableOccupiedException getTe() {
      return this.te;
    }

    public changeTable_result setTe(TableOccupiedException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException)value);
        }
        break;

      case PE:
        if (value == null) {
          unsetPe();
        } else {
          setPe((PermissionDenyExcpetion)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((TableOccupiedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case UE:
        return getUe();

      case PE:
        return getPe();

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UE:
        return isSetUe();
      case PE:
        return isSetPe();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeTable_result)
        return this.equals((changeTable_result)that);
      return false;
    }

    public boolean equals(changeTable_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_pe = true && this.isSetPe();
      boolean that_present_pe = true && that.isSetPe();
      if (this_present_pe || that_present_pe) {
        if (!(this_present_pe && that_present_pe))
          return false;
        if (!this.pe.equals(that.pe))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(changeTable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPe()).compareTo(other.isSetPe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pe, other.pe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(other.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, other.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeTable_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pe:");
      if (this.pe == null) {
        sb.append("null");
      } else {
        sb.append(this.pe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeTable_resultStandardSchemeFactory implements SchemeFactory {
      public changeTable_resultStandardScheme getScheme() {
        return new changeTable_resultStandardScheme();
      }
    }

    private static class changeTable_resultStandardScheme extends StandardScheme<changeTable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeTable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pe = new PermissionDenyExcpetion();
                struct.pe.read(iprot);
                struct.setPeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new TableOccupiedException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeTable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pe != null) {
          oprot.writeFieldBegin(PE_FIELD_DESC);
          struct.pe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeTable_resultTupleSchemeFactory implements SchemeFactory {
      public changeTable_resultTupleScheme getScheme() {
        return new changeTable_resultTupleScheme();
      }
    }

    private static class changeTable_resultTupleScheme extends TupleScheme<changeTable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeTable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUe()) {
          optionals.set(1);
        }
        if (struct.isSetPe()) {
          optionals.set(2);
        }
        if (struct.isSetTe()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetPe()) {
          struct.pe.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeTable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ue = new cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pe = new PermissionDenyExcpetion();
          struct.pe.read(iprot);
          struct.setPeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.te = new TableOccupiedException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

  public static class mergeTable_args implements org.apache.thrift.TBase<mergeTable_args, mergeTable_args._Fields>, java.io.Serializable, Cloneable, Comparable<mergeTable_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mergeTable_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OLD_TABLE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("oldTableIds", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField NEW_TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("newTableId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mergeTable_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mergeTable_argsTupleSchemeFactory());
    }

    public String sessionId; // required
    public List<String> oldTableIds; // required
    public String newTableId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      OLD_TABLE_IDS((short)2, "oldTableIds"),
      NEW_TABLE_ID((short)3, "newTableId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // OLD_TABLE_IDS
            return OLD_TABLE_IDS;
          case 3: // NEW_TABLE_ID
            return NEW_TABLE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OLD_TABLE_IDS, new org.apache.thrift.meta_data.FieldMetaData("oldTableIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.NEW_TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("newTableId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mergeTable_args.class, metaDataMap);
    }

    public mergeTable_args() {
    }

    public mergeTable_args(
      String sessionId,
      List<String> oldTableIds,
      String newTableId)
    {
      this();
      this.sessionId = sessionId;
      this.oldTableIds = oldTableIds;
      this.newTableId = newTableId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mergeTable_args(mergeTable_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      if (other.isSetOldTableIds()) {
        List<String> __this__oldTableIds = new ArrayList<String>(other.oldTableIds);
        this.oldTableIds = __this__oldTableIds;
      }
      if (other.isSetNewTableId()) {
        this.newTableId = other.newTableId;
      }
    }

    public mergeTable_args deepCopy() {
      return new mergeTable_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
      this.oldTableIds = null;
      this.newTableId = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public mergeTable_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public int getOldTableIdsSize() {
      return (this.oldTableIds == null) ? 0 : this.oldTableIds.size();
    }

    public java.util.Iterator<String> getOldTableIdsIterator() {
      return (this.oldTableIds == null) ? null : this.oldTableIds.iterator();
    }

    public void addToOldTableIds(String elem) {
      if (this.oldTableIds == null) {
        this.oldTableIds = new ArrayList<String>();
      }
      this.oldTableIds.add(elem);
    }

    public List<String> getOldTableIds() {
      return this.oldTableIds;
    }

    public mergeTable_args setOldTableIds(List<String> oldTableIds) {
      this.oldTableIds = oldTableIds;
      return this;
    }

    public void unsetOldTableIds() {
      this.oldTableIds = null;
    }

    /** Returns true if field oldTableIds is set (has been assigned a value) and false otherwise */
    public boolean isSetOldTableIds() {
      return this.oldTableIds != null;
    }

    public void setOldTableIdsIsSet(boolean value) {
      if (!value) {
        this.oldTableIds = null;
      }
    }

    public String getNewTableId() {
      return this.newTableId;
    }

    public mergeTable_args setNewTableId(String newTableId) {
      this.newTableId = newTableId;
      return this;
    }

    public void unsetNewTableId() {
      this.newTableId = null;
    }

    /** Returns true if field newTableId is set (has been assigned a value) and false otherwise */
    public boolean isSetNewTableId() {
      return this.newTableId != null;
    }

    public void setNewTableIdIsSet(boolean value) {
      if (!value) {
        this.newTableId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      case OLD_TABLE_IDS:
        if (value == null) {
          unsetOldTableIds();
        } else {
          setOldTableIds((List<String>)value);
        }
        break;

      case NEW_TABLE_ID:
        if (value == null) {
          unsetNewTableId();
        } else {
          setNewTableId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      case OLD_TABLE_IDS:
        return getOldTableIds();

      case NEW_TABLE_ID:
        return getNewTableId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case OLD_TABLE_IDS:
        return isSetOldTableIds();
      case NEW_TABLE_ID:
        return isSetNewTableId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mergeTable_args)
        return this.equals((mergeTable_args)that);
      return false;
    }

    public boolean equals(mergeTable_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_oldTableIds = true && this.isSetOldTableIds();
      boolean that_present_oldTableIds = true && that.isSetOldTableIds();
      if (this_present_oldTableIds || that_present_oldTableIds) {
        if (!(this_present_oldTableIds && that_present_oldTableIds))
          return false;
        if (!this.oldTableIds.equals(that.oldTableIds))
          return false;
      }

      boolean this_present_newTableId = true && this.isSetNewTableId();
      boolean that_present_newTableId = true && that.isSetNewTableId();
      if (this_present_newTableId || that_present_newTableId) {
        if (!(this_present_newTableId && that_present_newTableId))
          return false;
        if (!this.newTableId.equals(that.newTableId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(mergeTable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOldTableIds()).compareTo(other.isSetOldTableIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldTableIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldTableIds, other.oldTableIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewTableId()).compareTo(other.isSetNewTableId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewTableId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newTableId, other.newTableId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mergeTable_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oldTableIds:");
      if (this.oldTableIds == null) {
        sb.append("null");
      } else {
        sb.append(this.oldTableIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newTableId:");
      if (this.newTableId == null) {
        sb.append("null");
      } else {
        sb.append(this.newTableId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mergeTable_argsStandardSchemeFactory implements SchemeFactory {
      public mergeTable_argsStandardScheme getScheme() {
        return new mergeTable_argsStandardScheme();
      }
    }

    private static class mergeTable_argsStandardScheme extends StandardScheme<mergeTable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mergeTable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OLD_TABLE_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.oldTableIds = new ArrayList<String>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    String _elem10;
                    _elem10 = iprot.readString();
                    struct.oldTableIds.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setOldTableIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NEW_TABLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newTableId = iprot.readString();
                struct.setNewTableIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mergeTable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        if (struct.oldTableIds != null) {
          oprot.writeFieldBegin(OLD_TABLE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.oldTableIds.size()));
            for (String _iter11 : struct.oldTableIds)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.newTableId != null) {
          oprot.writeFieldBegin(NEW_TABLE_ID_FIELD_DESC);
          oprot.writeString(struct.newTableId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mergeTable_argsTupleSchemeFactory implements SchemeFactory {
      public mergeTable_argsTupleScheme getScheme() {
        return new mergeTable_argsTupleScheme();
      }
    }

    private static class mergeTable_argsTupleScheme extends TupleScheme<mergeTable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mergeTable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        if (struct.isSetOldTableIds()) {
          optionals.set(1);
        }
        if (struct.isSetNewTableId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
        if (struct.isSetOldTableIds()) {
          {
            oprot.writeI32(struct.oldTableIds.size());
            for (String _iter12 : struct.oldTableIds)
            {
              oprot.writeString(_iter12);
            }
          }
        }
        if (struct.isSetNewTableId()) {
          oprot.writeString(struct.newTableId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mergeTable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.oldTableIds = new ArrayList<String>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              String _elem15;
              _elem15 = iprot.readString();
              struct.oldTableIds.add(_elem15);
            }
          }
          struct.setOldTableIdsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.newTableId = iprot.readString();
          struct.setNewTableIdIsSet(true);
        }
      }
    }

  }

  public static class mergeTable_result implements org.apache.thrift.TBase<mergeTable_result, mergeTable_result._Fields>, java.io.Serializable, Cloneable, Comparable<mergeTable_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mergeTable_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PE_FIELD_DESC = new org.apache.thrift.protocol.TField("pe", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mergeTable_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mergeTable_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException ue; // required
    public PermissionDenyExcpetion pe; // required
    public TableOccupiedException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UE((short)1, "ue"),
      PE((short)2, "pe"),
      TE((short)3, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UE
            return UE;
          case 2: // PE
            return PE;
          case 3: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.PE, new org.apache.thrift.meta_data.FieldMetaData("pe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mergeTable_result.class, metaDataMap);
    }

    public mergeTable_result() {
    }

    public mergeTable_result(
      boolean success,
      cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException ue,
      PermissionDenyExcpetion pe,
      TableOccupiedException te)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ue = ue;
      this.pe = pe;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mergeTable_result(mergeTable_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetUe()) {
        this.ue = new cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException(other.ue);
      }
      if (other.isSetPe()) {
        this.pe = new PermissionDenyExcpetion(other.pe);
      }
      if (other.isSetTe()) {
        this.te = new TableOccupiedException(other.te);
      }
    }

    public mergeTable_result deepCopy() {
      return new mergeTable_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ue = null;
      this.pe = null;
      this.te = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public mergeTable_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException getUe() {
      return this.ue;
    }

    public mergeTable_result setUe(cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public PermissionDenyExcpetion getPe() {
      return this.pe;
    }

    public mergeTable_result setPe(PermissionDenyExcpetion pe) {
      this.pe = pe;
      return this;
    }

    public void unsetPe() {
      this.pe = null;
    }

    /** Returns true if field pe is set (has been assigned a value) and false otherwise */
    public boolean isSetPe() {
      return this.pe != null;
    }

    public void setPeIsSet(boolean value) {
      if (!value) {
        this.pe = null;
      }
    }

    public TableOccupiedException getTe() {
      return this.te;
    }

    public mergeTable_result setTe(TableOccupiedException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException)value);
        }
        break;

      case PE:
        if (value == null) {
          unsetPe();
        } else {
          setPe((PermissionDenyExcpetion)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((TableOccupiedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case UE:
        return getUe();

      case PE:
        return getPe();

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UE:
        return isSetUe();
      case PE:
        return isSetPe();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mergeTable_result)
        return this.equals((mergeTable_result)that);
      return false;
    }

    public boolean equals(mergeTable_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_pe = true && this.isSetPe();
      boolean that_present_pe = true && that.isSetPe();
      if (this_present_pe || that_present_pe) {
        if (!(this_present_pe && that_present_pe))
          return false;
        if (!this.pe.equals(that.pe))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(mergeTable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPe()).compareTo(other.isSetPe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pe, other.pe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(other.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, other.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mergeTable_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pe:");
      if (this.pe == null) {
        sb.append("null");
      } else {
        sb.append(this.pe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mergeTable_resultStandardSchemeFactory implements SchemeFactory {
      public mergeTable_resultStandardScheme getScheme() {
        return new mergeTable_resultStandardScheme();
      }
    }

    private static class mergeTable_resultStandardScheme extends StandardScheme<mergeTable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mergeTable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pe = new PermissionDenyExcpetion();
                struct.pe.read(iprot);
                struct.setPeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new TableOccupiedException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mergeTable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pe != null) {
          oprot.writeFieldBegin(PE_FIELD_DESC);
          struct.pe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mergeTable_resultTupleSchemeFactory implements SchemeFactory {
      public mergeTable_resultTupleScheme getScheme() {
        return new mergeTable_resultTupleScheme();
      }
    }

    private static class mergeTable_resultTupleScheme extends TupleScheme<mergeTable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mergeTable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUe()) {
          optionals.set(1);
        }
        if (struct.isSetPe()) {
          optionals.set(2);
        }
        if (struct.isSetTe()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetPe()) {
          struct.pe.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mergeTable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ue = new cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pe = new PermissionDenyExcpetion();
          struct.pe.read(iprot);
          struct.setPeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.te = new TableOccupiedException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

  public static class emptyTable_args implements org.apache.thrift.TBase<emptyTable_args, emptyTable_args._Fields>, java.io.Serializable, Cloneable, Comparable<emptyTable_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("emptyTable_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tableId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new emptyTable_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new emptyTable_argsTupleSchemeFactory());
    }

    public String sessionId; // required
    public String tableId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      TABLE_ID((short)2, "tableId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // TABLE_ID
            return TABLE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("tableId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(emptyTable_args.class, metaDataMap);
    }

    public emptyTable_args() {
    }

    public emptyTable_args(
      String sessionId,
      String tableId)
    {
      this();
      this.sessionId = sessionId;
      this.tableId = tableId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public emptyTable_args(emptyTable_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      if (other.isSetTableId()) {
        this.tableId = other.tableId;
      }
    }

    public emptyTable_args deepCopy() {
      return new emptyTable_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
      this.tableId = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public emptyTable_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public String getTableId() {
      return this.tableId;
    }

    public emptyTable_args setTableId(String tableId) {
      this.tableId = tableId;
      return this;
    }

    public void unsetTableId() {
      this.tableId = null;
    }

    /** Returns true if field tableId is set (has been assigned a value) and false otherwise */
    public boolean isSetTableId() {
      return this.tableId != null;
    }

    public void setTableIdIsSet(boolean value) {
      if (!value) {
        this.tableId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      case TABLE_ID:
        if (value == null) {
          unsetTableId();
        } else {
          setTableId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      case TABLE_ID:
        return getTableId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case TABLE_ID:
        return isSetTableId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof emptyTable_args)
        return this.equals((emptyTable_args)that);
      return false;
    }

    public boolean equals(emptyTable_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_tableId = true && this.isSetTableId();
      boolean that_present_tableId = true && that.isSetTableId();
      if (this_present_tableId || that_present_tableId) {
        if (!(this_present_tableId && that_present_tableId))
          return false;
        if (!this.tableId.equals(that.tableId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(emptyTable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableId()).compareTo(other.isSetTableId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableId, other.tableId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("emptyTable_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableId:");
      if (this.tableId == null) {
        sb.append("null");
      } else {
        sb.append(this.tableId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class emptyTable_argsStandardSchemeFactory implements SchemeFactory {
      public emptyTable_argsStandardScheme getScheme() {
        return new emptyTable_argsStandardScheme();
      }
    }

    private static class emptyTable_argsStandardScheme extends StandardScheme<emptyTable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, emptyTable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableId = iprot.readString();
                struct.setTableIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, emptyTable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        if (struct.tableId != null) {
          oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
          oprot.writeString(struct.tableId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class emptyTable_argsTupleSchemeFactory implements SchemeFactory {
      public emptyTable_argsTupleScheme getScheme() {
        return new emptyTable_argsTupleScheme();
      }
    }

    private static class emptyTable_argsTupleScheme extends TupleScheme<emptyTable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, emptyTable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        if (struct.isSetTableId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
        if (struct.isSetTableId()) {
          oprot.writeString(struct.tableId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, emptyTable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableId = iprot.readString();
          struct.setTableIdIsSet(true);
        }
      }
    }

  }

  public static class emptyTable_result implements org.apache.thrift.TBase<emptyTable_result, emptyTable_result._Fields>, java.io.Serializable, Cloneable, Comparable<emptyTable_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("emptyTable_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PE_FIELD_DESC = new org.apache.thrift.protocol.TField("pe", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new emptyTable_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new emptyTable_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException ue; // required
    public PermissionDenyExcpetion pe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UE((short)1, "ue"),
      PE((short)2, "pe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UE
            return UE;
          case 2: // PE
            return PE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.PE, new org.apache.thrift.meta_data.FieldMetaData("pe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(emptyTable_result.class, metaDataMap);
    }

    public emptyTable_result() {
    }

    public emptyTable_result(
      boolean success,
      cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException ue,
      PermissionDenyExcpetion pe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ue = ue;
      this.pe = pe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public emptyTable_result(emptyTable_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetUe()) {
        this.ue = new cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException(other.ue);
      }
      if (other.isSetPe()) {
        this.pe = new PermissionDenyExcpetion(other.pe);
      }
    }

    public emptyTable_result deepCopy() {
      return new emptyTable_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ue = null;
      this.pe = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public emptyTable_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException getUe() {
      return this.ue;
    }

    public emptyTable_result setUe(cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public PermissionDenyExcpetion getPe() {
      return this.pe;
    }

    public emptyTable_result setPe(PermissionDenyExcpetion pe) {
      this.pe = pe;
      return this;
    }

    public void unsetPe() {
      this.pe = null;
    }

    /** Returns true if field pe is set (has been assigned a value) and false otherwise */
    public boolean isSetPe() {
      return this.pe != null;
    }

    public void setPeIsSet(boolean value) {
      if (!value) {
        this.pe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException)value);
        }
        break;

      case PE:
        if (value == null) {
          unsetPe();
        } else {
          setPe((PermissionDenyExcpetion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case UE:
        return getUe();

      case PE:
        return getPe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UE:
        return isSetUe();
      case PE:
        return isSetPe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof emptyTable_result)
        return this.equals((emptyTable_result)that);
      return false;
    }

    public boolean equals(emptyTable_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_pe = true && this.isSetPe();
      boolean that_present_pe = true && that.isSetPe();
      if (this_present_pe || that_present_pe) {
        if (!(this_present_pe && that_present_pe))
          return false;
        if (!this.pe.equals(that.pe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(emptyTable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPe()).compareTo(other.isSetPe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pe, other.pe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("emptyTable_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pe:");
      if (this.pe == null) {
        sb.append("null");
      } else {
        sb.append(this.pe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class emptyTable_resultStandardSchemeFactory implements SchemeFactory {
      public emptyTable_resultStandardScheme getScheme() {
        return new emptyTable_resultStandardScheme();
      }
    }

    private static class emptyTable_resultStandardScheme extends StandardScheme<emptyTable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, emptyTable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pe = new PermissionDenyExcpetion();
                struct.pe.read(iprot);
                struct.setPeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, emptyTable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pe != null) {
          oprot.writeFieldBegin(PE_FIELD_DESC);
          struct.pe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class emptyTable_resultTupleSchemeFactory implements SchemeFactory {
      public emptyTable_resultTupleScheme getScheme() {
        return new emptyTable_resultTupleScheme();
      }
    }

    private static class emptyTable_resultTupleScheme extends TupleScheme<emptyTable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, emptyTable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUe()) {
          optionals.set(1);
        }
        if (struct.isSetPe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetPe()) {
          struct.pe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, emptyTable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ue = new cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pe = new PermissionDenyExcpetion();
          struct.pe.read(iprot);
          struct.setPeIsSet(true);
        }
      }
    }

  }

  public static class callService_args implements org.apache.thrift.TBase<callService_args, callService_args._Fields>, java.io.Serializable, Cloneable, Comparable<callService_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("callService_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tableId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new callService_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new callService_argsTupleSchemeFactory());
    }

    public String sessionId; // required
    public String tableId; // required
    /**
     * 
     * @see ServiceType
     */
    public ServiceType type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      TABLE_ID((short)2, "tableId"),
      /**
       * 
       * @see ServiceType
       */
      TYPE((short)3, "type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // TABLE_ID
            return TABLE_ID;
          case 3: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("tableId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ServiceType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(callService_args.class, metaDataMap);
    }

    public callService_args() {
    }

    public callService_args(
      String sessionId,
      String tableId,
      ServiceType type)
    {
      this();
      this.sessionId = sessionId;
      this.tableId = tableId;
      this.type = type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public callService_args(callService_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      if (other.isSetTableId()) {
        this.tableId = other.tableId;
      }
      if (other.isSetType()) {
        this.type = other.type;
      }
    }

    public callService_args deepCopy() {
      return new callService_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
      this.tableId = null;
      this.type = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public callService_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public String getTableId() {
      return this.tableId;
    }

    public callService_args setTableId(String tableId) {
      this.tableId = tableId;
      return this;
    }

    public void unsetTableId() {
      this.tableId = null;
    }

    /** Returns true if field tableId is set (has been assigned a value) and false otherwise */
    public boolean isSetTableId() {
      return this.tableId != null;
    }

    public void setTableIdIsSet(boolean value) {
      if (!value) {
        this.tableId = null;
      }
    }

    /**
     * 
     * @see ServiceType
     */
    public ServiceType getType() {
      return this.type;
    }

    /**
     * 
     * @see ServiceType
     */
    public callService_args setType(ServiceType type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      case TABLE_ID:
        if (value == null) {
          unsetTableId();
        } else {
          setTableId((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((ServiceType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      case TABLE_ID:
        return getTableId();

      case TYPE:
        return getType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case TABLE_ID:
        return isSetTableId();
      case TYPE:
        return isSetType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof callService_args)
        return this.equals((callService_args)that);
      return false;
    }

    public boolean equals(callService_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_tableId = true && this.isSetTableId();
      boolean that_present_tableId = true && that.isSetTableId();
      if (this_present_tableId || that_present_tableId) {
        if (!(this_present_tableId && that_present_tableId))
          return false;
        if (!this.tableId.equals(that.tableId))
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(callService_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableId()).compareTo(other.isSetTableId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableId, other.tableId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("callService_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableId:");
      if (this.tableId == null) {
        sb.append("null");
      } else {
        sb.append(this.tableId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class callService_argsStandardSchemeFactory implements SchemeFactory {
      public callService_argsStandardScheme getScheme() {
        return new callService_argsStandardScheme();
      }
    }

    private static class callService_argsStandardScheme extends StandardScheme<callService_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, callService_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableId = iprot.readString();
                struct.setTableIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = ServiceType.findByValue(iprot.readI32());
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, callService_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        if (struct.tableId != null) {
          oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
          oprot.writeString(struct.tableId);
          oprot.writeFieldEnd();
        }
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class callService_argsTupleSchemeFactory implements SchemeFactory {
      public callService_argsTupleScheme getScheme() {
        return new callService_argsTupleScheme();
      }
    }

    private static class callService_argsTupleScheme extends TupleScheme<callService_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, callService_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        if (struct.isSetTableId()) {
          optionals.set(1);
        }
        if (struct.isSetType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
        if (struct.isSetTableId()) {
          oprot.writeString(struct.tableId);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, callService_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableId = iprot.readString();
          struct.setTableIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.type = ServiceType.findByValue(iprot.readI32());
          struct.setTypeIsSet(true);
        }
      }
    }

  }

  public static class callService_result implements org.apache.thrift.TBase<callService_result, callService_result._Fields>, java.io.Serializable, Cloneable, Comparable<callService_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("callService_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new callService_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new callService_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException ue; // required
    public TableEmptyException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UE((short)1, "ue"),
      TE((short)2, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UE
            return UE;
          case 2: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(callService_result.class, metaDataMap);
    }

    public callService_result() {
    }

    public callService_result(
      boolean success,
      cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException ue,
      TableEmptyException te)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ue = ue;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public callService_result(callService_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetUe()) {
        this.ue = new cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException(other.ue);
      }
      if (other.isSetTe()) {
        this.te = new TableEmptyException(other.te);
      }
    }

    public callService_result deepCopy() {
      return new callService_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ue = null;
      this.te = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public callService_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException getUe() {
      return this.ue;
    }

    public callService_result setUe(cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public TableEmptyException getTe() {
      return this.te;
    }

    public callService_result setTe(TableEmptyException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((TableEmptyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case UE:
        return getUe();

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UE:
        return isSetUe();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof callService_result)
        return this.equals((callService_result)that);
      return false;
    }

    public boolean equals(callService_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(callService_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(other.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, other.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("callService_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class callService_resultStandardSchemeFactory implements SchemeFactory {
      public callService_resultStandardScheme getScheme() {
        return new callService_resultStandardScheme();
      }
    }

    private static class callService_resultStandardScheme extends StandardScheme<callService_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, callService_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new TableEmptyException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, callService_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class callService_resultTupleSchemeFactory implements SchemeFactory {
      public callService_resultTupleScheme getScheme() {
        return new callService_resultTupleScheme();
      }
    }

    private static class callService_resultTupleScheme extends TupleScheme<callService_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, callService_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUe()) {
          optionals.set(1);
        }
        if (struct.isSetTe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, callService_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ue = new cn.com.cloudstone.menu.server.thrift.api.UserNotLoginException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.te = new TableEmptyException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

}
