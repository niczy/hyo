/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.com.cloudstone.menu.server.thrift.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 单个商品订单
 */
public class GoodsOrder implements org.apache.thrift.TBase<GoodsOrder, GoodsOrder._Fields>, java.io.Serializable, Cloneable, Comparable<GoodsOrder> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GoodsOrder");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField REMARKS_FIELD_DESC = new org.apache.thrift.protocol.TField("remarks", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SHORT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("shortName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ON_SALES_FIELD_DESC = new org.apache.thrift.protocol.TField("onSales", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField ORDERID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderid", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField GOODSTATE_FIELD_DESC = new org.apache.thrift.protocol.TField("goodstate", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GoodsOrderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GoodsOrderTupleSchemeFactory());
  }

  public int id; // required
  public double number; // required
  public double price; // required
  public List<String> remarks; // required
  public String name; // required
  public String shortName; // required
  public String category; // required
  public boolean onSales; // required
  public int orderid; // required
  /**
   * 
   * @see GoodState
   */
  public GoodState goodstate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NUMBER((short)2, "number"),
    PRICE((short)3, "price"),
    REMARKS((short)4, "remarks"),
    NAME((short)5, "name"),
    SHORT_NAME((short)6, "shortName"),
    CATEGORY((short)7, "category"),
    ON_SALES((short)8, "onSales"),
    ORDERID((short)9, "orderid"),
    /**
     * 
     * @see GoodState
     */
    GOODSTATE((short)10, "goodstate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NUMBER
          return NUMBER;
        case 3: // PRICE
          return PRICE;
        case 4: // REMARKS
          return REMARKS;
        case 5: // NAME
          return NAME;
        case 6: // SHORT_NAME
          return SHORT_NAME;
        case 7: // CATEGORY
          return CATEGORY;
        case 8: // ON_SALES
          return ON_SALES;
        case 9: // ORDERID
          return ORDERID;
        case 10: // GOODSTATE
          return GOODSTATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __NUMBER_ISSET_ID = 1;
  private static final int __PRICE_ISSET_ID = 2;
  private static final int __ONSALES_ISSET_ID = 3;
  private static final int __ORDERID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REMARKS, new org.apache.thrift.meta_data.FieldMetaData("remarks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHORT_NAME, new org.apache.thrift.meta_data.FieldMetaData("shortName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ON_SALES, new org.apache.thrift.meta_data.FieldMetaData("onSales", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ORDERID, new org.apache.thrift.meta_data.FieldMetaData("orderid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GOODSTATE, new org.apache.thrift.meta_data.FieldMetaData("goodstate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, GoodState.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GoodsOrder.class, metaDataMap);
  }

  public GoodsOrder() {
  }

  public GoodsOrder(
    int id,
    double number,
    double price,
    List<String> remarks,
    String name,
    String shortName,
    String category,
    boolean onSales,
    int orderid,
    GoodState goodstate)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.number = number;
    setNumberIsSet(true);
    this.price = price;
    setPriceIsSet(true);
    this.remarks = remarks;
    this.name = name;
    this.shortName = shortName;
    this.category = category;
    this.onSales = onSales;
    setOnSalesIsSet(true);
    this.orderid = orderid;
    setOrderidIsSet(true);
    this.goodstate = goodstate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GoodsOrder(GoodsOrder other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.number = other.number;
    this.price = other.price;
    if (other.isSetRemarks()) {
      List<String> __this__remarks = new ArrayList<String>(other.remarks);
      this.remarks = __this__remarks;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetShortName()) {
      this.shortName = other.shortName;
    }
    if (other.isSetCategory()) {
      this.category = other.category;
    }
    this.onSales = other.onSales;
    this.orderid = other.orderid;
    if (other.isSetGoodstate()) {
      this.goodstate = other.goodstate;
    }
  }

  public GoodsOrder deepCopy() {
    return new GoodsOrder(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setNumberIsSet(false);
    this.number = 0.0;
    setPriceIsSet(false);
    this.price = 0.0;
    this.remarks = null;
    this.name = null;
    this.shortName = null;
    this.category = null;
    setOnSalesIsSet(false);
    this.onSales = false;
    setOrderidIsSet(false);
    this.orderid = 0;
    this.goodstate = null;
  }

  public int getId() {
    return this.id;
  }

  public GoodsOrder setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public double getNumber() {
    return this.number;
  }

  public GoodsOrder setNumber(double number) {
    this.number = number;
    setNumberIsSet(true);
    return this;
  }

  public void unsetNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  /** Returns true if field number is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  public void setNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
  }

  public double getPrice() {
    return this.price;
  }

  public GoodsOrder setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  public int getRemarksSize() {
    return (this.remarks == null) ? 0 : this.remarks.size();
  }

  public java.util.Iterator<String> getRemarksIterator() {
    return (this.remarks == null) ? null : this.remarks.iterator();
  }

  public void addToRemarks(String elem) {
    if (this.remarks == null) {
      this.remarks = new ArrayList<String>();
    }
    this.remarks.add(elem);
  }

  public List<String> getRemarks() {
    return this.remarks;
  }

  public GoodsOrder setRemarks(List<String> remarks) {
    this.remarks = remarks;
    return this;
  }

  public void unsetRemarks() {
    this.remarks = null;
  }

  /** Returns true if field remarks is set (has been assigned a value) and false otherwise */
  public boolean isSetRemarks() {
    return this.remarks != null;
  }

  public void setRemarksIsSet(boolean value) {
    if (!value) {
      this.remarks = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public GoodsOrder setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getShortName() {
    return this.shortName;
  }

  public GoodsOrder setShortName(String shortName) {
    this.shortName = shortName;
    return this;
  }

  public void unsetShortName() {
    this.shortName = null;
  }

  /** Returns true if field shortName is set (has been assigned a value) and false otherwise */
  public boolean isSetShortName() {
    return this.shortName != null;
  }

  public void setShortNameIsSet(boolean value) {
    if (!value) {
      this.shortName = null;
    }
  }

  public String getCategory() {
    return this.category;
  }

  public GoodsOrder setCategory(String category) {
    this.category = category;
    return this;
  }

  public void unsetCategory() {
    this.category = null;
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.category = null;
    }
  }

  public boolean isOnSales() {
    return this.onSales;
  }

  public GoodsOrder setOnSales(boolean onSales) {
    this.onSales = onSales;
    setOnSalesIsSet(true);
    return this;
  }

  public void unsetOnSales() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ONSALES_ISSET_ID);
  }

  /** Returns true if field onSales is set (has been assigned a value) and false otherwise */
  public boolean isSetOnSales() {
    return EncodingUtils.testBit(__isset_bitfield, __ONSALES_ISSET_ID);
  }

  public void setOnSalesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ONSALES_ISSET_ID, value);
  }

  public int getOrderid() {
    return this.orderid;
  }

  public GoodsOrder setOrderid(int orderid) {
    this.orderid = orderid;
    setOrderidIsSet(true);
    return this;
  }

  public void unsetOrderid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  /** Returns true if field orderid is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderid() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  public void setOrderidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERID_ISSET_ID, value);
  }

  /**
   * 
   * @see GoodState
   */
  public GoodState getGoodstate() {
    return this.goodstate;
  }

  /**
   * 
   * @see GoodState
   */
  public GoodsOrder setGoodstate(GoodState goodstate) {
    this.goodstate = goodstate;
    return this;
  }

  public void unsetGoodstate() {
    this.goodstate = null;
  }

  /** Returns true if field goodstate is set (has been assigned a value) and false otherwise */
  public boolean isSetGoodstate() {
    return this.goodstate != null;
  }

  public void setGoodstateIsSet(boolean value) {
    if (!value) {
      this.goodstate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NUMBER:
      if (value == null) {
        unsetNumber();
      } else {
        setNumber((Double)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case REMARKS:
      if (value == null) {
        unsetRemarks();
      } else {
        setRemarks((List<String>)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SHORT_NAME:
      if (value == null) {
        unsetShortName();
      } else {
        setShortName((String)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((String)value);
      }
      break;

    case ON_SALES:
      if (value == null) {
        unsetOnSales();
      } else {
        setOnSales((Boolean)value);
      }
      break;

    case ORDERID:
      if (value == null) {
        unsetOrderid();
      } else {
        setOrderid((Integer)value);
      }
      break;

    case GOODSTATE:
      if (value == null) {
        unsetGoodstate();
      } else {
        setGoodstate((GoodState)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NUMBER:
      return Double.valueOf(getNumber());

    case PRICE:
      return Double.valueOf(getPrice());

    case REMARKS:
      return getRemarks();

    case NAME:
      return getName();

    case SHORT_NAME:
      return getShortName();

    case CATEGORY:
      return getCategory();

    case ON_SALES:
      return Boolean.valueOf(isOnSales());

    case ORDERID:
      return Integer.valueOf(getOrderid());

    case GOODSTATE:
      return getGoodstate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NUMBER:
      return isSetNumber();
    case PRICE:
      return isSetPrice();
    case REMARKS:
      return isSetRemarks();
    case NAME:
      return isSetName();
    case SHORT_NAME:
      return isSetShortName();
    case CATEGORY:
      return isSetCategory();
    case ON_SALES:
      return isSetOnSales();
    case ORDERID:
      return isSetOrderid();
    case GOODSTATE:
      return isSetGoodstate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GoodsOrder)
      return this.equals((GoodsOrder)that);
    return false;
  }

  public boolean equals(GoodsOrder that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_number = true;
    boolean that_present_number = true;
    if (this_present_number || that_present_number) {
      if (!(this_present_number && that_present_number))
        return false;
      if (this.number != that.number)
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_remarks = true && this.isSetRemarks();
    boolean that_present_remarks = true && that.isSetRemarks();
    if (this_present_remarks || that_present_remarks) {
      if (!(this_present_remarks && that_present_remarks))
        return false;
      if (!this.remarks.equals(that.remarks))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_shortName = true && this.isSetShortName();
    boolean that_present_shortName = true && that.isSetShortName();
    if (this_present_shortName || that_present_shortName) {
      if (!(this_present_shortName && that_present_shortName))
        return false;
      if (!this.shortName.equals(that.shortName))
        return false;
    }

    boolean this_present_category = true && this.isSetCategory();
    boolean that_present_category = true && that.isSetCategory();
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (!this.category.equals(that.category))
        return false;
    }

    boolean this_present_onSales = true;
    boolean that_present_onSales = true;
    if (this_present_onSales || that_present_onSales) {
      if (!(this_present_onSales && that_present_onSales))
        return false;
      if (this.onSales != that.onSales)
        return false;
    }

    boolean this_present_orderid = true;
    boolean that_present_orderid = true;
    if (this_present_orderid || that_present_orderid) {
      if (!(this_present_orderid && that_present_orderid))
        return false;
      if (this.orderid != that.orderid)
        return false;
    }

    boolean this_present_goodstate = true && this.isSetGoodstate();
    boolean that_present_goodstate = true && that.isSetGoodstate();
    if (this_present_goodstate || that_present_goodstate) {
      if (!(this_present_goodstate && that_present_goodstate))
        return false;
      if (!this.goodstate.equals(that.goodstate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(GoodsOrder other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemarks()).compareTo(other.isSetRemarks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemarks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remarks, other.remarks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortName()).compareTo(other.isSetShortName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortName, other.shortName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnSales()).compareTo(other.isSetOnSales());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnSales()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onSales, other.onSales);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderid()).compareTo(other.isSetOrderid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderid, other.orderid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoodstate()).compareTo(other.isSetGoodstate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoodstate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodstate, other.goodstate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GoodsOrder(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number:");
    sb.append(this.number);
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remarks:");
    if (this.remarks == null) {
      sb.append("null");
    } else {
      sb.append(this.remarks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shortName:");
    if (this.shortName == null) {
      sb.append("null");
    } else {
      sb.append(this.shortName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("category:");
    if (this.category == null) {
      sb.append("null");
    } else {
      sb.append(this.category);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("onSales:");
    sb.append(this.onSales);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderid:");
    sb.append(this.orderid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("goodstate:");
    if (this.goodstate == null) {
      sb.append("null");
    } else {
      sb.append(this.goodstate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GoodsOrderStandardSchemeFactory implements SchemeFactory {
    public GoodsOrderStandardScheme getScheme() {
      return new GoodsOrderStandardScheme();
    }
  }

  private static class GoodsOrderStandardScheme extends StandardScheme<GoodsOrder> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GoodsOrder struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.number = iprot.readDouble();
              struct.setNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REMARKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.remarks = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2;
                  _elem2 = iprot.readString();
                  struct.remarks.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setRemarksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SHORT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shortName = iprot.readString();
              struct.setShortNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.category = iprot.readString();
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ON_SALES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.onSales = iprot.readBool();
              struct.setOnSalesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ORDERID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderid = iprot.readI32();
              struct.setOrderidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // GOODSTATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.goodstate = GoodState.findByValue(iprot.readI32());
              struct.setGoodstateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GoodsOrder struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER_FIELD_DESC);
      oprot.writeDouble(struct.number);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRICE_FIELD_DESC);
      oprot.writeDouble(struct.price);
      oprot.writeFieldEnd();
      if (struct.remarks != null) {
        oprot.writeFieldBegin(REMARKS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.remarks.size()));
          for (String _iter3 : struct.remarks)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.shortName != null) {
        oprot.writeFieldBegin(SHORT_NAME_FIELD_DESC);
        oprot.writeString(struct.shortName);
        oprot.writeFieldEnd();
      }
      if (struct.category != null) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        oprot.writeString(struct.category);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ON_SALES_FIELD_DESC);
      oprot.writeBool(struct.onSales);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORDERID_FIELD_DESC);
      oprot.writeI32(struct.orderid);
      oprot.writeFieldEnd();
      if (struct.goodstate != null) {
        oprot.writeFieldBegin(GOODSTATE_FIELD_DESC);
        oprot.writeI32(struct.goodstate.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GoodsOrderTupleSchemeFactory implements SchemeFactory {
    public GoodsOrderTupleScheme getScheme() {
      return new GoodsOrderTupleScheme();
    }
  }

  private static class GoodsOrderTupleScheme extends TupleScheme<GoodsOrder> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GoodsOrder struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetNumber()) {
        optionals.set(1);
      }
      if (struct.isSetPrice()) {
        optionals.set(2);
      }
      if (struct.isSetRemarks()) {
        optionals.set(3);
      }
      if (struct.isSetName()) {
        optionals.set(4);
      }
      if (struct.isSetShortName()) {
        optionals.set(5);
      }
      if (struct.isSetCategory()) {
        optionals.set(6);
      }
      if (struct.isSetOnSales()) {
        optionals.set(7);
      }
      if (struct.isSetOrderid()) {
        optionals.set(8);
      }
      if (struct.isSetGoodstate()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetNumber()) {
        oprot.writeDouble(struct.number);
      }
      if (struct.isSetPrice()) {
        oprot.writeDouble(struct.price);
      }
      if (struct.isSetRemarks()) {
        {
          oprot.writeI32(struct.remarks.size());
          for (String _iter4 : struct.remarks)
          {
            oprot.writeString(_iter4);
          }
        }
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetShortName()) {
        oprot.writeString(struct.shortName);
      }
      if (struct.isSetCategory()) {
        oprot.writeString(struct.category);
      }
      if (struct.isSetOnSales()) {
        oprot.writeBool(struct.onSales);
      }
      if (struct.isSetOrderid()) {
        oprot.writeI32(struct.orderid);
      }
      if (struct.isSetGoodstate()) {
        oprot.writeI32(struct.goodstate.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GoodsOrder struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.number = iprot.readDouble();
        struct.setNumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.price = iprot.readDouble();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.remarks = new ArrayList<String>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            String _elem7;
            _elem7 = iprot.readString();
            struct.remarks.add(_elem7);
          }
        }
        struct.setRemarksIsSet(true);
      }
      if (incoming.get(4)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.shortName = iprot.readString();
        struct.setShortNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.category = iprot.readString();
        struct.setCategoryIsSet(true);
      }
      if (incoming.get(7)) {
        struct.onSales = iprot.readBool();
        struct.setOnSalesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.orderid = iprot.readI32();
        struct.setOrderidIsSet(true);
      }
      if (incoming.get(9)) {
        struct.goodstate = GoodState.findByValue(iprot.readI32());
        struct.setGoodstateIsSet(true);
      }
    }
  }

}

